"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date))
##create a unique neighbourhood ID (NID)
test1$NID [test1$neighbourhood_group_cleansed == "Mitte"] <- 1
test1$NID [test1$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
test1$NID [test1$neighbourhood_group_cleansed == "Pankow"] <- 3
test1$NID [test1$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
test1$NID [test1$neighbourhood_group_cleansed == "Spandau"] <- 5
test1$NID [test1$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
test1$NID [test1$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
test1$NID [test1$neighbourhood_group_cleansed == "Neukölln"] <- 8
test1$NID [test1$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
test1$NID [test1$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
test1$NID [test1$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
test1$NID [test1$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
library(dplyr)
library(ggplot2)
library(lubridate)
library(knitr)
library(pastecs)
library(Hmisc)
library(curl)
library(rio)
library(stringr)
library(plyr)
library(knitr)
library(curl)
library(xml2)
library(plyr)
library(DataCombine)
library(tidyr)
library(data.table)
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date))
##create a unique neighbourhood ID (NID)
test1$NID [test1$neighbourhood_group_cleansed == "Mitte"] <- 1
test1$NID [test1$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
test1$NID [test1$neighbourhood_group_cleansed == "Pankow"] <- 3
test1$NID [test1$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
test1$NID [test1$neighbourhood_group_cleansed == "Spandau"] <- 5
test1$NID [test1$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
test1$NID [test1$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
test1$NID [test1$neighbourhood_group_cleansed == "Neukölln"] <- 8
test1$NID [test1$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
test1$NID [test1$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
test1$NID [test1$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
test1$NID [test1$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
test_macro <- count(test1, c("NID", "host_since_year", "host_since_month"))
names(test_macro) <- c("NID", "year", "month", "apt_new")
View(test_macro)
test_macro <- test_macro[order(test_macro$NID, test_macro$year, test_macro$month, decreasing = FALSE), ]
View(test_macro)
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.Date(paste( host_since_year, host_since_month , sep = "_" )  , format = "%y.%m" ) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month , sep = "_" )  , format = "%y.%m" ) ##create a new yy-mm variable
View(test1)
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month , sep = "_" )  , format = "%y_%m" ) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" )) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" )) ##create a new yy-mm variable
test1$year_month <- as.integer(paste(test1$host_since_year, test1$host_since_month, sep = "_" )) ##create a new yy-mm variable
test1$year_month <- as.numeric(paste(test1$host_since_year, test1$host_since_month, sep = "_" )) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" )) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%y_%m" ) ##create a new yy-mm variable
host_since_month = month(date), host_since_year = year(date))) ##spliting host_since date up into its elemnts
test1$host_since_month <- as.Date(test1$host_since_month)
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%Y_%m" ) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%y%m" ) ##create a new yy-mm variable
parse_date_time(as.character(2013_12), "%Y%m%d")
parse_date_time(as.character(201302), "%Y%m%d")
parse_date_time(as.character(201302), "%Y%m")
parse_date(as.character(201302), "%Y%m")
parse_date(as.character(201302), "%Y%m")
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%y%m" ) ##create a new yy-mm variable
test1$year_month <- as.numeric(paste(test1$host_since_year, test1$host_since_month, sep = "_" )  ##create a new yy-mm variable
test1$year_month <- as.numeric(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))  ##create a new yy-mm variable
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$host_since_month <- as.Date(test1$host_since_month)
test1$year_month <- as.numeric(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))  ##create a new yy-mm variable
test1$year_month <- as.integer(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))  ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%Y%m" ) ##create a new yy-mm variable
Detailed_Listings <- Detailed_Listings[, c("id", "name", "host_id", "host_name", "host_since",
"host_response_rate", "host_acceptance_rate",
"host_neighbourhood", "host_listings_count", "street",
"neighbourhood_group_cleansed", "city", "state",
"zipcode", "smart_location", "room_type",
"accommodates", "beds", "bed_type", "price",
"number_of_reviews", "first_review", "last_review",
"reviews_per_month", "availability_30",
"availability_60", "availability_90",
"availability_365")]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%Y_%m" ) ##create a new yy-mm variable
test1$year_month <- as.Date(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) , format = "%Y.%m" ) ##create a new yy-mm variable
test1$year_month <- as.numeric(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) ) ##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ) ) ##create a new yy-mm variable
test_macro <- count(test1, c("NID", "year_month"))
##create a unique neighbourhood ID (NID)
test1$NID [test1$neighbourhood_group_cleansed == "Mitte"] <- 1
test1$NID [test1$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
test1$NID [test1$neighbourhood_group_cleansed == "Pankow"] <- 3
test1$NID [test1$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
test1$NID [test1$neighbourhood_group_cleansed == "Spandau"] <- 5
test1$NID [test1$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
test1$NID [test1$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
test1$NID [test1$neighbourhood_group_cleansed == "Neukölln"] <- 8
test1$NID [test1$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
test1$NID [test1$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
test1$NID [test1$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
test1$NID [test1$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
test_macro <- count(test1, c("NID", "year_month"))
names(test_macro) <- c("NID", "year_month", "apt_new")
test_macro <- test_macro[order(test_macro$NID, test_macro$year_month, decreasing = FALSE), ]
View(test_macro)
test1$year_month <- as.Date(test1$year_month, "%Y%m")
test1$year_month <- as.Date(test1$year_month, "%YYYY%mm")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$host_since_month <- as.Date(test1$host_since_month)
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
test1$year_month <- as.Date(test1$year_month, "%YYYY%mm")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
test1$year_month <- as.Date(test1$year_month, "%Y%m")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m")
Sys.getlocale(category = "LC_TIME")
[1] "German_Germany.1252"
Sys.setlocale("LC_TIME", "English")
[1] "English_United States.1252"
test1$year_month <- as.Date(test1$year_month, "%Y_%m")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
##create a unique neighbourhood ID (NID)
test1$NID [test1$neighbourhood_group_cleansed == "Mitte"] <- 1
test1$NID [test1$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
test1$NID [test1$neighbourhood_group_cleansed == "Pankow"] <- 3
test1$NID [test1$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
test1$NID [test1$neighbourhood_group_cleansed == "Spandau"] <- 5
test1$NID [test1$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
test1$NID [test1$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
test1$NID [test1$neighbourhood_group_cleansed == "Neukölln"] <- 8
test1$NID [test1$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
test1$NID [test1$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
test1$NID [test1$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
test1$NID [test1$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
# count # of new apts per month per year per district
test_macro <- count(test1, c("NID", "year_month"))
#rename columns for merging
names(test_macro) <- c("NID", "year_month", "apt_new")
#reorder data
test_macro <- test_macro[order(test_macro$NID, test_macro$year_month, decreasing = FALSE), ]
test_macro_sum <-  test_macro$sum <- ave(test_macro$NID, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$NID, test_macro$year_month, FUN=sum)
parse_date_time(test1$year_month)
parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month)
host_since_month = month(date), host_since_year = year(date), host_since_YM = year_month(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, "%Y%m") ##doesnt seem to work
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
test1$YM <- as.Date(test1$year_month, format="%Y%M") ##doesnt seem to work
test1$host_since_year <- as.Date(test1$host_since_month)
test1$host_since_year <- as.Date(test1$host_since_month, "%Y")
test1$host_since_year <- as.Date(test1$host_since_year, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
levels test1$host_since_month
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
View(test1)
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review"
"last_review")]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review",
"last_review")]
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elements
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(x=Year)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
#loading graphs packages
library(ggplot2)
library(grid)
library(scales)
library(RColorBrewer)
library(stargazer)
View(ILOSTAT)
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & y=X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ggplot(ILOSTAT, aes(x=Year, y=X55_64)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(Year, X55_64)) + geom_line() +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
scale_x_date(format = "%Y") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers Age 65+") +
title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
library(reshape2)
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
View(ILOSTAT_m)
#ILO Stat for graph - Labour force participation rate by sex and age (%) - Germany (Source: ILO, 2015)
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle="Labour force participation rate age in Germany (2000 - 2015)" +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle=("Labour force participation rate age in Germany (2000 - 2015)") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
ModelIII <- FEIIm(analysis_simple$occup_rate, analysis_simple)
#####################
## R source to first pair assignment
## Dan Murphy & Paulo Kalkhake
## Last update: 3 October 2016
## R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## What it does: merging cleaned data sets
##########################
#Set working directory
try(setwd("/Users/Paulo/GitHub/FinalPaper/code"),silent=TRUE)
try(setwd("/Users/djm113/Documents/GitHub/FinalPaper/code"),silent=TRUE)
#Dynamical link
source('merge.R')
##### Data Prep and descriptive analysis using the static supply #####
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014 <- data_2010_2014[order(data_2010_2014$NID,data_2010_2014$year_month),]
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$seqym <- ave(analysis_simple$AB_supply, analysis_simple$NID, FUN = seq_along)
analysis_simple$marketentry <- ifelse((analysis_simple$seqym < "18"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
analysis_simple$AB_supply_2 <- analysis_simple$AB_supply*analysis_simple$AB_supply
#dummy for district specific market entry
analysis_simple$dmarketentry <- ifelse((analysis_simple$AB_supply < 10), 0, 1)
#Create binary variable for passed Zweckentfremdungsverbot in May 2014
analysis_simple$ZEV <- ifelse((analysis_simple$seqym > "53"), 1, 0)
###### Data Prep and descriptive analysis using the dynmic supply ######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
danalysis_simple$neighbourhood <- substring(danalysis_simple$neighbourhood, 3)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$ym <- as.yearmon(danalysis_simple$year_month)
danalysis_simple$marketentry <- ifelse((danalysis_simple$ym < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
danalysis_simple$AB_supply_2 <- danalysis_simple$AB_supply*danalysis_simple$AB_supply
#dummy for district specific market entry
danalysis_simple$dmarketentry <- ifelse((danalysis_simple$AB_supply < 10), 0, 1)
#Subset for observations where Airbnb Supply was at least 10 apts
marketentry_static <- subset(analysis_simple, analysis_simple$dmarketentry==1)
marketentry_dynamic <- subset(danalysis_simple, analysis_simple$dmarketentry==1)
#Create binary variable for passed Zweckentfremdungsverbot in May 2014
danalysis_simple$ZEV <- ifelse((danalysis_simple$ym > "Mai 2014"), 0, 1)
##### Inferent Statistics #####
LMI <- function(x, y) {
(lm(x ~ log_ABsupply + NID + factor_ym, data=y))
}
LMII <- function(x, y) {
(lm(x ~ AB_supply + log_inc + ue_rate + dmarketentry + arrivals + NID + factor_ym, data=y))
}
LMIII <- function(x, y) {
(lm(x ~ 0 +log_ABsupply + log_inc + ue_rate +  arrivals + marketentry + as.factor(NID) + factor_ym, data=y))
}
LMIV <- function(x, y) {
(lm(x ~ 0 + log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + arrivals + marketentry + NID + factor_ym, data=y))
}
LMV <- function(x, y) {
(lm(x ~ 0 + AB_supply + AB_supply_2 + log_inc + ue_rate + dmarketentry + arrivals + NID + factor_ym, data=y))
}
FEI <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
FEII <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals + dmarketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIIm <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals + marketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIIz <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals + ZEV, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIIdm <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals + marketentry + dmarketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIIa <- function(x, y) {
plm(x ~ AB_supply + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIII <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry
FEIV <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry + nonlinear
FEV <- function(x, y) {
plm(x ~ AB_supply + AB_supply_2 + log_inc + ue_rate + arrivals + marketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
ModelI <- LMIII(analysis_simple$occup_rate, analysis_simple)
summary(ModelI)
LMII <- function(x, y) {
(lm(x ~ log_ABsupply + log_inc + ue_rate + arrivals + as.factor(NID) + factor_ym, data=y))
}
ModelI <- LMII(analysis_simple$occup_rate, analysis_simple)
summary(ModelI)
LMII <- function(x, y) {
(lm(x ~ 0 + log_ABsupply + log_inc + ue_rate + arrivals + as.factor(NID) + factor_ym, data=y))
}
ModelI <- LMII(analysis_simple$occup_rate, analysis_simple)
summary(ModelI)
ModelII <- FEI(analysis_simple$occup_rate, analysis_simple)
summary(ModelII)
ModelIII <- FEIIm(analysis_simple$occup_rate, analysis_simple)
summary(ModelIII)
ModelI <- LMII(analysis_simple$occup_rate, analysis_simple)
ModelII <- FEI(analysis_simple$occup_rate, analysis_simple)
ModelIII <- FEIIm(analysis_simple$occup_rate, analysis_simple)
View(analysis_simple)
analysis_simple$marketentry <- ifelse((analysis_simple$seqym < 18), 0, 1)
analysis_simple$ZEV <- ifelse((analysis_simple$seqym > 53), 1, 0)
LMII <- function(x, y, z) {
(lm(x ~ 0 + z + log_inc + ue_rate + as.factor(NID) + factor_ym, data=y))
}
FEIa <- function(x, y, z) {
plm(x ~ z + log_inc + ue_rate, data=y, index=c("NID", "factor_ym"), model="within")
}
FEI <- function(x, y, z) {
plm(x ~ z + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIIm <- function(x, y, z) {
plm(x ~ z + log_inc + ue_rate + arrivals + marketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
Test <- FEI(analysis_simple$occup_rate, analysis_simple, analysis_simple$log_ABsupply)
summary(Test)
Test <- FEIIm(analysis_simple$occup_rate, analysis_simple, analysis_simple$log_ABsupply)
summary(Test)
ModelI <- LMII(analysis_simple$overnights, analysis_simple, analysis_simple$log_ABsupply)
summary(ModelI)
ModelI <- LMII(analysis_simple$overnights, analysis_simple, analysis_simple$log_ABsupply)
LMII <- function(x, y, z) {
(lm(x ~ 0 + z + log_inc + ue_rate + as.factor(NID) + factor_ym, data=y))
}
ModelI <- LMII(analysis_simple$overnights, analysis_simple, analysis_simple$log_ABsupply)
ModelI <- LMII(analysis_simple$nights, analysis_simple, analysis_simple$log_ABsupply)
summary(ModelI)
ModelI <- LMII(analysis_simple$occup_rate, analysis_simple, analysis_simple$log_ABsupply)
