ModelI <- plm(log_nights ~ log_ABsupply, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelI)
ModelII <- plm(log_nights ~ log_ABsupply*AB_supply + log_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="within")
summary(ModelI)
ModelII <- plm(log_nights ~ log_ABsupply*AB_supply + log_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="within")
summary(ModelI)
summary(ModelII)
ModelI <- felm(analysis_simple$log_nights ~ analysis_simple$log_ABsupply | as.factor(analysis_simple$NID) + as.factor(analysis_simple$year_month))
summary(ModelI)
#Model I:
ModelI <- plm(log_nights ~ log_ABsupply, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelI)
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelII)
ModelA <- plm(occup_rate ~ log_ABsupply, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelA)
ModelC <- plm(occup_rate ~ log_ABsupply*AB_supply + log_inc + ue_rate), data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelC)
ModelC <- plm(occup_rate ~ log_ABsupply*AB_supply + log_inc + ue_rate, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelC)
ModelC <- plm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelC)
ModelD <- plm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry + as.factor(NID) + factor_ym, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelD)
ModelD <- plm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelD)
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelII)
ModelIILM <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + NID + factor_ym, data=analysis_simple)
ModelIILM <- lm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + NID + factor_ym, data=analysis_simple)
summary(ModelIILM)
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelII)
ModelIILM <- lm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry + NID + factor_ym, data=analysis_simple)
summary(ModelIILM)
ModelA <- plm(occup_rate ~ log_ABsupply, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelA)
ModelC <- plm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelC)
ModelD <- plm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelD)
ModelMitte <- plm(occup_rate ~ log_ABsupply + log_inc + ue_rate + marketentry, index = c("factor_ym") data=NID_Mitte)
ModelMitte <- plm(occup_rate ~ log_ABsupply + log_inc + ue_rate + marketentry, index = c("factor_ym"), data=NID_Mitte)
NID_Mitte <- subset(analysis_simple, analysis_simple$NID==1)
ModelMitte <- plm(occup_rate ~ log_ABsupply + log_inc + ue_rate + marketentry, index = c("factor_ym"), data=NID_Mitte)
ModelMitte <- plm(occup_rate ~ log_ABsupply + log_inc + ue_rate + marketentry, data=NID_Mitte, index = c("factor_ym"), model = "within")
NID_Mitte <- subset(analysis_simple, analysis_simple$NID==1)
ModelMitte <- plm(occup_rate ~ log_ABsupply + log_inc + ue_rate + marketentry, data=NID_Mitte, index = c("factor_ym"), model = "within")
summary(ModelMitte)
ModelMitte <- plm(occup_rate ~ log_ABsupply + log_inc + ue_rate + marketentry, data=NID_Mitte, index = "factor_ym", model = "within")
summary(ModelMitte)
ModelDLM <- lm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry  + NID + factor_ym, data=analysis_simple)
summary(ModelDLM)
D
ModelD <- plm(occup_rate ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelD)
linearHypothesis(ModelD, c("log_ABsupply", "logABAB = 0"), test="F")
linearHypothesis(ModelD, c("AB_supply", "logABAB = 0"), test="F")
pFtest(ModelII, ModelIILM) #p-value <.05 -> time fixed effects
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelII)
ModelIILM <- lm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry + NID + factor_ym, data=analysis_simple)
summary(ModelIILM)
#Testing whether fixed effects is needed. The null is that no time-fixed effects needed
pFtest(ModelII, ModelIILM) #p-value <.05 -> time fixed effects
life_long <- cast(lifecourse, id + NID ~ rev_year_month)
life_long <- cast(lifecourse, id + NID + count ~ rev_year_month)
View(lifecourse)
lifecourse_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse$life [is.na(lifecourse$life)] <- 0
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
lifecourse_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
lifecourse_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
#Set working directory
try(setwd("/Users/Paulo/GitHub/FinalPaper/code"),silent=TRUE)
try(setwd("/Users/djm113/Documents/GitHub/FinalPaper/code"),silent=TRUE)
#Dynamical link
source('merge.R')
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
#Group data
#analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$year <- as.numeric(analysis_simple$year)
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
agg_reviews$new_reviews[agg_reviews$new_reviews >= "1"] <- 1
agg_reviews_time <- expand.grid(id = unique(agg_reviews$id),
rev_year_month = unique(agg_reviews$rev_year_month))
lifecycle <- merge(agg_reviews, agg_reviews_time, all = TRUE)
id_NID <- listings[, c("id", "host_since", "first_review", "NID")]
lifecycle_NID <- merge(lifecycle, id_NID, by = c("id"), all = TRUE)
lifecycle_NID$new_reviews[is.na(lifecycle_NID$new_reviews)] <- 0
#Computing listing date (6 months prior to first review)
#lifecycle_NID$listingdate <- as.Date(as.yearmon(as.Date(lifecycle_NID$first_review)) - .5)
lifecycle_NID$listingdate <- lifecycle_NID$first_review
#Splitting listing date up into its elements
lifecycle_NID$listingdate <- as.Date(lifecycle_NID$listingdate,"%Y-%m-%d")
lifecycle_NID <- mutate(lifecycle_NID, date = ymd(lifecycle_NID$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse$life [is.na(lifecourse$life)] <- 0
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
lifecourse_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
lifecourse_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
life_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
life_reshape <- lifecourse
life_reshape <- lifecourse[, c("id", "NID", "rev_year_month", "count")]
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
life_reshape <- lifecourse
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
View(life_reshape)
life_long <- cast(life_reshape, id + NID + count ~ rev_year_month)
life_long <- cast(life_reshape, id + NID ~ rev_year_month)
life_long <- cast(life_reshape, id ~ rev_year_month)
View(life_long)
View(lifecycle)
View(lifecycle_NID)
View(lifecourse)
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
#####################
## R source to first pair assignment
## Dan Murphy & Paulo Kalkhake
## Last update: 3 October 2016
## Last update: 11 November 2016
## R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## What it does: clean inside Airbnb data
## What it does: Cleans Airbnb data
##########################
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
agg_reviews$new_reviews[agg_reviews$new_reviews >= "1"] <- 1
agg_reviews_time <- expand.grid(id = unique(agg_reviews$id),
rev_year_month = unique(agg_reviews$rev_year_month))
lifecycle <- merge(agg_reviews, agg_reviews_time, all = TRUE)
id_NID <- listings[, c("id", "host_since", "first_review", "NID")]
lifecycle_NID <- merge(lifecycle, id_NID, by = c("id"), all = TRUE)
lifecycle_NID$new_reviews[is.na(lifecycle_NID$new_reviews)] <- 0
#Computing listing date (6 months prior to first review)
#lifecycle_NID$listingdate <- as.Date(as.yearmon(as.Date(lifecycle_NID$first_review)) - .5)
lifecycle_NID$listingdate <- lifecycle_NID$first_review
#Splitting listing date up into its elements
lifecycle_NID$listingdate <- as.Date(lifecycle_NID$listingdate,"%Y-%m-%d")
lifecycle_NID <- mutate(lifecycle_NID, date = ymd(lifecycle_NID$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
lifecourse$life [is.na(lifecourse$life)] <- 0
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
life_reshape <- lifecourse
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
life_long <- cast(life_reshape, id ~ rev_year_month)
View(life_long)
life_long_NID <- merge(life_long, id_NID, by = c("id"), all.x = TRUE)
View(life_long_NID)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_reshape[, c(2:5)] <- NULL
life_reshape[, 2:5] <- NULL
life_reshape[, -(2:5)]
life_reshape <- life_reshape[, -(2:5)]
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
View(analysis_simple)
aggregate(life_long_NID$Frequency, by=list(Category=life_long_NID$NID), FUN=cumsum)
aggregate(life_long_NID, by=list(Category=life_long_NID$NID), FUN=cumsum)
life_wide_NID <- aggregate(life_long_NID, by=list(Category=life_long_NID$NID), FUN=cumsum)
View(life_wide_NID)
life_long_NID$id <- NULL
life_wide_NID <- aggregate(life_long_NID, by=list(Category=life_long_NID$NID), FUN=cumsum)
life_wide_NID <- tally(group_by(NID))
life_wide_NID <- tally(group_by(life_long_NID$NID))
life_long <- cast(life_reshape, id ~ rev_year_month)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
life_long_NID$id <- NULL
life_wide_NID <- tally(group_by(life_long_NID$NID))
rowsum(life_long_NID, NID, reorder = TRUE)
rowsum(life_long_NID, life_long_NID$NID, reorder = TRUE)
life_wide_NID <- rowsum(life_long_NID, life_long_NID$NID, reorder = TRUE)
View(life_wide_NID)
life_wide_NID <- aggregate(life_long_NID, life_long_NID$NID, FUN = sum)
life_wide_NID <- aggregate(life_long_NID, life_long_NID$NID, FUN = sum)
life_wide_NID <- tapply(life_long_NID, NID, FUN = sum)
life_wide_NID <- tapply(life_long_NID, life_wide_NID$NID, FUN = sum)
life_wide_new <- tapply(life_long_NID, life_wide_NID$NID, FUN = sum)
life_wide_new <- tapply(life_long_NID, life_wide_NID$NID, FUN = sum)
t(sapply(split(as.data.frame(life_wide_new), NID), colSums))
aggregate(life_wide_new, list(NID), sum)[-1]
life_wide_NID <- tally(group_by(listings, NID, year_month))
View(life_wide_NID)
agg_listings <- tally(group_by(listings, NID))
life_wide_NID <- tally(group_by(life_long_NID, NID))
life_wide_NID <- tally(group_by(NID))
life_wide_NID <- tally(group_by(life_wide_NIDA$NID))
life_wide_NID <- tally(group_by(life_wide_NID$NID))
View(life_long_NID)
View(lifecycle_NID)
life_long_NID.dt <- data.table(life_long_NID)
life_long_NID.dt[,list(), by='NID']
aggregate(life_long_NID[,c(1:60)] ~ NID, life_long_NID, sum)
months <- rownames(life_long_NID)
months <- colnames(life_long_NID)
life_long_NID.dt$NID <- NULL
months <- colnames(life_long_NID.dt)
aggregate(life_long_NID[, months] ~ NID, life_long_NID, sum)
aggregate(months ~ NID, life_long_NID, sum)
life_long_NID_dt <- data.table(life_long_NID)
life_long_NID_dt[months=sum(months), by='NID']
life_long_NID_dt[list(months)=sum(list(months)), by='NID']
shop.dt <- data.table(life_long_NID)
shop.dt[,sum=sum(c(1:60)), by='NID']
shop.dt[,sum=sum(shop.dt), by='NID']
melt.df<-melt(life_long_NID,id="NID")
View(melt.df)
life_listings <- tally(group_by(melt.df, NID, variable))
View(life_listings)
aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
View(life_listings)
View(analysis_simple)
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
agg_reviews$new_reviews[agg_reviews$new_reviews >= "1"] <- 1
agg_reviews_time <- expand.grid(id = unique(agg_reviews$id),
rev_year_month = unique(agg_reviews$rev_year_month))
lifecycle <- merge(agg_reviews, agg_reviews_time, all = TRUE)
id_NID <- listings[, c("id", "host_since", "first_review", "NID")]
lifecycle_NID <- merge(lifecycle, id_NID, by = c("id"), all = TRUE)
lifecycle_NID$new_reviews[is.na(lifecycle_NID$new_reviews)] <- 0
#Computing listing date (6 months prior to first review)
#lifecycle_NID$listingdate <- as.Date(as.yearmon(as.Date(lifecycle_NID$first_review)) - .5)
lifecycle_NID$listingdate <- lifecycle_NID$first_review
#Splitting listing date up into its elements
lifecycle_NID$listingdate <- as.Date(lifecycle_NID$listingdate,"%Y-%m-%d")
lifecycle_NID <- mutate(lifecycle_NID, date = ymd(lifecycle_NID$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
lifecourse$life [is.na(lifecourse$life)] <- 0
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
life_reshape <- lifecourse
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
life_long <- cast(life_reshape, id ~ rev_year_month)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
life_long_NID$id <- NULL
life_long_NID.dt$NID <- NULL
melt.df<-melt(life_long_NID,id="conversion.id")
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
#####################
## R source to first pair assignment
## Dan Murphy & Paulo Kalkhake
## Last update: 3 October 2016
## Last update: 11 November 2016
## R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## What it does: clean inside Airbnb data
## What it does: Cleans Airbnb data
##########################
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
agg_reviews$new_reviews[agg_reviews$new_reviews >= "1"] <- 1
agg_reviews_time <- expand.grid(id = unique(agg_reviews$id),
rev_year_month = unique(agg_reviews$rev_year_month))
lifecycle <- merge(agg_reviews, agg_reviews_time, all = TRUE)
id_NID <- listings[, c("id", "host_since", "first_review", "NID")]
lifecycle_NID <- merge(lifecycle, id_NID, by = c("id"), all = TRUE)
lifecycle_NID$new_reviews[is.na(lifecycle_NID$new_reviews)] <- 0
#Computing listing date (6 months prior to first review)
#lifecycle_NID$listingdate <- as.Date(as.yearmon(as.Date(lifecycle_NID$first_review)) - .5)
lifecycle_NID$listingdate <- lifecycle_NID$first_review
#Splitting listing date up into its elements
lifecycle_NID$listingdate <- as.Date(lifecycle_NID$listingdate,"%Y-%m-%d")
lifecycle_NID <- mutate(lifecycle_NID, date = ymd(lifecycle_NID$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
lifecourse$life [is.na(lifecourse$life)] <- 0
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
life_reshape <- lifecourse
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
life_long <- cast(life_reshape, id ~ rev_year_month)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
life_long_NID$id <- NULL
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
View(life_listings)
lifecourse$life[is.na(lifecourse$life)] <- 0
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
lifecourse$life[is.na(lifecourse$life)] <- 0
View(lifecourse)
#####################
## R source to first pair assignment
## Dan Murphy & Paulo Kalkhake
## Last update: 3 October 2016
## Last update: 11 November 2016
## R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## What it does: clean inside Airbnb data
## What it does: Cleans Airbnb data
##########################
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
agg_reviews$new_reviews[agg_reviews$new_reviews >= "1"] <- 1
agg_reviews_time <- expand.grid(id = unique(agg_reviews$id),
rev_year_month = unique(agg_reviews$rev_year_month))
lifecycle <- merge(agg_reviews, agg_reviews_time, all = TRUE)
id_NID <- listings[, c("id", "host_since", "first_review", "NID")]
lifecycle_NID <- merge(lifecycle, id_NID, by = c("id"), all = TRUE)
lifecycle_NID$new_reviews[is.na(lifecycle_NID$new_reviews)] <- 0
#Computing listing date (6 months prior to first review)
#lifecycle_NID$listingdate <- as.Date(as.yearmon(as.Date(lifecycle_NID$first_review)) - .5)
lifecycle_NID$listingdate <- lifecycle_NID$first_review
#Splitting listing date up into its elements
lifecycle_NID$listingdate <- as.Date(lifecycle_NID$listingdate,"%Y-%m-%d")
lifecycle_NID <- mutate(lifecycle_NID, date = ymd(lifecycle_NID$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
life_reshape <- lifecourse
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
life_long <- cast(life_reshape, id ~ rev_year_month)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
life_long_NID$id <- NULL
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
View(life_listings)
life_long <- cast(life_reshape, id ~ rev_year_month)
