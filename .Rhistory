test1$year_month <- as.Date(test1$year_month, "%YYYY%mm")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
test1$year_month <- as.Date(test1$year_month, "%Y%m")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m")
Sys.getlocale(category = "LC_TIME")
[1] "German_Germany.1252"
Sys.setlocale("LC_TIME", "English")
[1] "English_United States.1252"
test1$year_month <- as.Date(test1$year_month, "%Y_%m")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
##create a unique neighbourhood ID (NID)
test1$NID [test1$neighbourhood_group_cleansed == "Mitte"] <- 1
test1$NID [test1$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
test1$NID [test1$neighbourhood_group_cleansed == "Pankow"] <- 3
test1$NID [test1$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
test1$NID [test1$neighbourhood_group_cleansed == "Spandau"] <- 5
test1$NID [test1$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
test1$NID [test1$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
test1$NID [test1$neighbourhood_group_cleansed == "Neukölln"] <- 8
test1$NID [test1$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
test1$NID [test1$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
test1$NID [test1$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
test1$NID [test1$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
# count # of new apts per month per year per district
test_macro <- count(test1, c("NID", "year_month"))
#rename columns for merging
names(test_macro) <- c("NID", "year_month", "apt_new")
#reorder data
test_macro <- test_macro[order(test_macro$NID, test_macro$year_month, decreasing = FALSE), ]
test_macro_sum <-  test_macro$sum <- ave(test_macro$NID, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$NID, test_macro$year_month, FUN=sum)
parse_date_time(test1$year_month)
parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month)
host_since_month = month(date), host_since_year = year(date), host_since_YM = year_month(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, "%Y%m") ##doesnt seem to work
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
test1$YM <- as.Date(test1$year_month, format="%Y%M") ##doesnt seem to work
test1$host_since_year <- as.Date(test1$host_since_month)
test1$host_since_year <- as.Date(test1$host_since_month, "%Y")
test1$host_since_year <- as.Date(test1$host_since_year, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
levels test1$host_since_month
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
View(test1)
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review"
"last_review")]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review",
"last_review")]
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elements
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(x=Year)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
#loading graphs packages
library(ggplot2)
library(grid)
library(scales)
library(RColorBrewer)
library(stargazer)
View(ILOSTAT)
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & y=X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ggplot(ILOSTAT, aes(x=Year, y=X55_64)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(Year, X55_64)) + geom_line() +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
scale_x_date(format = "%Y") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers Age 65+") +
title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
library(reshape2)
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
View(ILOSTAT_m)
#ILO Stat for graph - Labour force participation rate by sex and age (%) - Germany (Source: ILO, 2015)
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle="Labour force participation rate age in Germany (2000 - 2015)" +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle=("Labour force participation rate age in Germany (2000 - 2015)") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
setwd('/Users/Paulo/Documents/PolComR')
library(twitteR)
library(streamR)
library(stringr)
library(RCurl)
library(maps)
library(devtools)
library(tm)
library (base64enc)
library(Rfacebook)
library(ROAuth)
library(ggplot2)
library(igraph)
BrexitTweets <- parseTweets("BrexitNov.json")
rt_extract <- function(json){
# read file
tw <- parseTweets(json)
# keeping only retweets
tw <- tw[grepl('RT @', tw$text),]
# extracting edges
edges <- data.frame(
retweeter = tw$screen_name,
retweeted = gsub('.*RT @([a-zA-Z0-9_]+):? ?.*', tw$text, repl="\\1"),
stringsAsFactors=FALSE)
return(edges)
}
edges <- rt_extract("BrexitTweets")
rt_extract <- function(json){
# read file
tw <- parseTweets(json)
# keeping only retweets
tw <- tw[grepl('RT @', tw$text),]
# extracting edges
edges <- data.frame(
retweeter = tw$screen_name,
retweeted = gsub('.*RT @([a-zA-Z0-9_]+):? ?.*', tw$text, repl="\\1"),
stringsAsFactors=F)
return(edges)
}
edges <- rt_extract("BrexitTweets")
edges <- rt_extract("BrexitTweets.json")
edges <- rt_extract("BrexitTweets")
BrexitTweets <- parseTweets("BrexitNov.json")
BrexitNov <- read.csv("~/Documents/PolComR/BrexitNov.json", header=FALSE)
View(BrexitNov)
edges <- rt_extract("BrexitNov.json")
View(edges)
write.csv(edges, file = "EdgesBrexit.csv")
graphObject = as.matrix(read.csv("EdgesBrexit_CLEAN.csv", sep=";", header = FALSE))
BrexitGraph<-graph_from_edgelist(graphObject, directed = TRUE)
write.csv(edges, file = "EdgesBrexit.csv")
BrexitGraph<-graph_from_edgelist(graphObject, directed = TRUE)
graphObject = as.matrix(read.csv("EdgesBrexit_CLEAN.csv", sep=";", header = FALSE))
graphObject = as.matrix(read.csv("EdgesBrexit.csv", sep=";", header = FALSE))
BrexitGraph<-graph_from_edgelist(graphObject, directed = TRUE)
write.csv(edges, file = "EdgesBrexit.csv")
graphObject = as.matrix(read.csv("EdgesBrexit.csv", sep=",", header = FALSE))
BrexitGraph<-graph_from_edgelist(graphObject, directed = TRUE)
is.connected(graphObject)
# remove objects from the specified environment
rm(list=ls())
# Load Packages: credits to Wickham Hadley, Xie Yihui, Frank Harrell Jr, Philippe Grosejan & Frederic Ibanez and others
# (install when needed)
library(ggplot2)
library(lubridate)
library(knitr)
library(pastecs)
library(Hmisc)
library(curl)
library(rio)
library(stringr)
library(plyr)
library(xml2)
library(DataCombine)
library(tidyr)
library(data.table)
library(dplyr)
library(zoo)
#Loading Data from "Regionaldatenbank Deutschland"
GENESIS_2010 <- read.csv("data/GENESIS_2010.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2011 <- read.csv("data/GENESIS_2011.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2012 <- read.csv("data/GENESIS_2012.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2013 <- read.csv("data/GENESIS_2013.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2014 <- read.csv("data/GENESIS_2014.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
#Loading data from the Statistical Office Berlin/Brandenburg
SBB_2010_2015 <- read.csv("data/SBB_2010_2015.csv", sep=";", stringsAsFactors = FALSE)
SBB_unemployment <- read.csv2("data/SBB_unemployment.csv", stringsAsFactors = FALSE)
SBB_HH_Income <- read.csv2("data/SBB_HH_Income.csv", header = FALSE, stringsAsFactors = FALSE)
# remove objects from the specified environment
rm(list=ls())
# Set working directory
try(setwd("/Users/Paulo/GitHub/FinalPaper/"),silent=TRUE)
try(setwd("/Users/djm113/Documents/GitHub/FinalPaper/"),silent=TRUE)
# Load Packages: credits to Wickham Hadley, Xie Yihui, Frank Harrell Jr, Philippe Grosejan & Frederic Ibanez and others
# (install when needed)
library(ggplot2)
library(lubridate)
library(knitr)
library(pastecs)
library(Hmisc)
library(curl)
library(rio)
library(stringr)
library(plyr)
library(xml2)
library(DataCombine)
library(tidyr)
library(data.table)
library(dplyr)
library(zoo)
#Loading Data from "Regionaldatenbank Deutschland"
GENESIS_2010 <- read.csv("data/GENESIS_2010.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2011 <- read.csv("data/GENESIS_2011.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2012 <- read.csv("data/GENESIS_2012.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2013 <- read.csv("data/GENESIS_2013.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
GENESIS_2014 <- read.csv("data/GENESIS_2014.csv", sep=";", quote="\"", stringsAsFactors = FALSE)
#Loading data from the Statistical Office Berlin/Brandenburg
SBB_2010_2015 <- read.csv("data/SBB_2010_2015.csv", sep=";", stringsAsFactors = FALSE)
SBB_unemployment <- read.csv2("data/SBB_unemployment.csv", stringsAsFactors = FALSE)
SBB_HH_Income <- read.csv2("data/SBB_HH_Income.csv", header = FALSE, stringsAsFactors = FALSE)
#Loading "listings.csv.gz" dataset from InsideAirbnb.com
Listings_URL <- "http://data.insideairbnb.com/germany/be/berlin/2015-10-03/data/listings.csv.gz"
temp <- tempfile()
download.file(Listings_URL, temp)
Detailed_Listings <- read.csv(gzfile(temp, "listings.csv"))
unlink(temp)
#Import "reviews.csv" from insideairbnb.com
Airbnb_Reviews <- read.csv("http://data.insideairbnb.com/germany/be/berlin/2015-10-03/visualisations/reviews.csv")
#Creating a blank filling function
Fill <- function(x,missing="")
{
Log <- x != missing
y <- x[Log]
y[cumsum(Log)]
}
names(SBB_unemployment) <- c("neighbourhood", "year", "totalworkforce", "V2", "jobseeker", "V3")
SBB_unemployment$neighbourhood <- Fill(as.character(SBB_unemployment$neighbourhood))
SBB_unemployment <- SBB_unemployment[, c("neighbourhood", "year", "totalworkforce", "jobseeker")]
##Calculating the unemployment rate
SBB_unemployment$ue_rate <- SBB_unemployment$jobseeker/SBB_unemployment$totalworkforce
##Creating a unique neighbourhood ID (NID)
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Mitte"] <- 1
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Friedrichshain-Kreuzberg"] <- 2
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Pankow"] <- 3
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Charlottenburg-Wilmersdorf"] <- 4
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Spandau"] <- 5
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Steglitz-Zehlendorf"] <- 6
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Tempelhof-Schoeneberg"] <- 7
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Neukoelln"] <- 8
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Treptow-Koepenick"] <- 9
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Marzahn-Hellersdorf"] <- 10
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Lichtenberg"] <- 11
SBB_unemployment$NID [SBB_unemployment$neighbourhood == "Reinickendorf"] <- 12
#Creating ready-to-merge dataset
SBB_unemployment_merge <- SBB_unemployment[, c("NID", "year", "ue_rate")]
##### Cleaning SBB DATA household income #####
SBB_HH_Income <- SBB_HH_Income[-1,]
SBB_HH_Income <- SBB_HH_Income[, c("V1", "V2", "V5", "V7", "V9", "V11",
"V13", "V15", "V17")]
names(SBB_HH_Income) <- c("neighbourhood", "year", "inc_500_899", "inc_900_1299", "inc_1300_1499", "inc_1500_1999", "inc_2000_2599", "inc_2600_3199", "inc_3200plus")
SBB_HH_Income$neighbourhood <- Fill(as.character(SBB_HH_Income$neighbourhood))
##Creating a unique neighbourhood ID (NID)
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Mitte"] <- 1
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Friedrichshain-Kreuzberg"] <- 2
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Pankow"] <- 3
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Charlottenburg-Wilmersdorf"] <- 4
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Spandau"] <- 5
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Steglitz-Zehlendorf"] <- 6
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Tempelhof-Schoeneberg"] <- 7
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Neukoelln"] <- 8
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Treptow-Koepenick"] <- 9
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Marzahn-Hellersdorf"] <- 10
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Lichtenberg"] <- 11
SBB_HH_Income$NID [SBB_HH_Income$neighbourhood == "Reinickendorf"] <- 12
#Cleaning up income data
SBB_HH_Income$inc_500_899 <- as.numeric(SBB_HH_Income$inc_500_899)
SBB_HH_Income$inc_900_1299 <- as.numeric(SBB_HH_Income$inc_900_1299)
SBB_HH_Income$inc_1300_1499 <- as.numeric(SBB_HH_Income$inc_1300_1499)
SBB_HH_Income$inc_1500_1999 <- as.numeric(SBB_HH_Income$inc_1500_1999)
SBB_HH_Income$inc_2000_2599 <- as.numeric(SBB_HH_Income$inc_2000_2599)
SBB_HH_Income$inc_2600_3199 <- as.numeric(SBB_HH_Income$inc_2600_3199)
SBB_HH_Income$inc_3200plus <- as.numeric(SBB_HH_Income$inc_3200plus)
#Creating average income per district
#Number of people per income group*average income per group according to column names
SBB_HH_Income$sum <- SBB_HH_Income$inc_500_899 + SBB_HH_Income$inc_900_1299 + SBB_HH_Income$inc_1300_1499 + SBB_HH_Income$inc_1500_1999 + SBB_HH_Income$inc_2000_2599 + SBB_HH_Income$inc_2600_3199 + SBB_HH_Income$inc_3200plus
SBB_HH_Income$value1 <- SBB_HH_Income$inc_500_899/SBB_HH_Income$sum*((500+899)/2) + SBB_HH_Income$inc_900_1299*((900+1299)/2) + SBB_HH_Income$inc_1300_1499*((1300+1499)/2) + SBB_HH_Income$inc_1500_1999*((1500+1999)/2) + SBB_HH_Income$inc_2000_2599*((2000+2599)/2) + SBB_HH_Income$inc_2600_3199*((2600+3199)/2) + SBB_HH_Income$inc_3200plus*3200
SBB_HH_Income$avg_inc <- SBB_HH_Income$value1/SBB_HH_Income$sum
#Creating ready to merge dataset
SBB_HH_Income_merge <- SBB_HH_Income[, c("NID", "year", "avg_inc")]
##### cleaning SBB DATA on tourism #####
#drop rows with no information, remove columns that contain entirely NA values, rename columns
SBB_2010_2015 <- SBB_2010_2015[-(865:871),]
SBB_2010_2015 <- SBB_2010_2015 [, !apply(is.na(SBB_2010_2015), 2, all)]
names(SBB_2010_2015) <- c("neighbourhood", "year", "month", "guests", "nights")
SBB_2010_2015$month [SBB_2010_2015$month == "Januar"] <- 1
SBB_2010_2015$month [SBB_2010_2015$month == "Februar"] <- 2
SBB_2010_2015$month [SBB_2010_2015$month == "Maerz"] <- 3
SBB_2010_2015$month [SBB_2010_2015$month == "April"] <- 4
SBB_2010_2015$month [SBB_2010_2015$month == "Mai"] <- 5
SBB_2010_2015$month [SBB_2010_2015$month == "Juni"] <- 6
SBB_2010_2015$month [SBB_2010_2015$month == "Juli"] <- 7
SBB_2010_2015$month [SBB_2010_2015$month == "August"] <- 8
SBB_2010_2015$month [SBB_2010_2015$month == "September"] <- 9
SBB_2010_2015$month [SBB_2010_2015$month == "Oktober"] <- 10
SBB_2010_2015$month [SBB_2010_2015$month == "November"] <- 11
SBB_2010_2015$month [SBB_2010_2015$month == "Dezember"] <- 12
##Filling in blanks
SBB_2010_2015$neighbourhood <- Fill(as.character(SBB_2010_2015$neighbourhood))
SBB_2010_2015$year <- Fill(as.character(SBB_2010_2015$year))
#Creating a yy-mm time variable
SBB_2010_2015$year_month <- as.yearmon(paste(SBB_2010_2015$year, SBB_2010_2015$month, sep = "-"))
#Creating a unique neighbourhood ID
SBB_2010_2015$NID <- sapply(strsplit(as.character(SBB_2010_2015$neighbourhood),' '), "[", 1)
SBB_2010_2015$NID [SBB_2010_2015$NID == "01"] <- 1
SBB_2010_2015$NID [SBB_2010_2015$NID == "02"] <- 2
SBB_2010_2015$NID [SBB_2010_2015$NID == "03"] <- 3
SBB_2010_2015$NID [SBB_2010_2015$NID == "04"] <- 4
SBB_2010_2015$NID [SBB_2010_2015$NID == "05"] <- 5
SBB_2010_2015$NID [SBB_2010_2015$NID == "06"] <- 6
SBB_2010_2015$NID [SBB_2010_2015$NID == "07"] <- 7
SBB_2010_2015$NID [SBB_2010_2015$NID == "08"] <- 8
SBB_2010_2015$NID [SBB_2010_2015$NID == "09"] <- 9
SBB_2010_2015 <- SBB_2010_2015[, c(7,6,1,2,3,4,5)]
SBB_2010_2015 <- SBB_2010_2015[order(SBB_2010_2015$year_month, decreasing = FALSE), ] # order for NID
#Creating a ready-to-merge dataset
SBB_2010_2015_merge <- SBB_2010_2015
#Removing unnecessary data subsets
remove(SBB_HH_Income, SBB_unemployment)
#Renaming columns
names(GENESIS_2010) <- c("NID", "neighbourhood", "hotels", "beds", "overnight", "visitors")
GENESIS_2010 <- GENESIS_2010[-1,]
names(GENESIS_2011) <- c("NID", "neighbourhood", "hotels", "beds", "overnight", "visitors")
GENESIS_2011 <- GENESIS_2011[-1,]
names(GENESIS_2012) <- c("NID", "neighbourhood", "hotels", "beds", "overnight", "visitors")
GENESIS_2012 <- GENESIS_2012[-1,]
names(GENESIS_2013) <- c("NID", "neighbourhood", "hotels", "beds", "overnight", "visitors")
GENESIS_2013 <- GENESIS_2013[-1,]
names(GENESIS_2014) <- c("NID", "neighbourhood", "hotels", "beds", "overnight", "visitors")
GENESIS_2014 <- GENESIS_2014[-1,]
#Adding a time variable (year)
GENESIS_2010$year <- 2010
GENESIS_2011$year <- 2011
GENESIS_2012$year <- 2012
GENESIS_2013$year <- 2013
GENESIS_2014$year <- 2014
#Assigning values to Neighbourhood ID's (NID's)
GENESIS_2010$NID <- c(1:12)
GENESIS_2011$NID <- c(1:12)
GENESIS_2012$NID <- c(1:12)
GENESIS_2013$NID <- c(1:12)
GENESIS_2014$NID <- c(1:12)
#Joining data frames per genre
GENESIS <- rbind(GENESIS_2010, GENESIS_2011, GENESIS_2012, GENESIS_2013, GENESIS_2014)
GENESIS <- GENESIS[order(GENESIS$NID, decreasing = FALSE), ] # order for NID
GENESIS <- GENESIS[, c(1,2,7,3,4,5,6)]
#Removing unnecessary data subsets
remove(GENESIS_2010, GENESIS_2011, GENESIS_2012, GENESIS_2013, GENESIS_2014)
GENESIS_merge <- GENESIS[, c("NID", "year", "beds")]
listings <- Detailed_Listings
listings <- listings[, c("id", "host_id", "host_since", "neighbourhood_group_cleansed",
View(listings)
View(listings)
View(listings)
"room_type", "beds", "first_review",  "last_review")]
listings <- listings[, c("id", "host_id", "host_since", "neighbourhood_group_cleansed",
"room_type", "beds", "first_review",  "last_review")]
View(listings)
"first_review",  "last_review")]
#This deletes 5 Airbnb listings for which there are no dates at all
"first_review",  "last_review")]
listings <- listings[, c("id", "host_id", "host_since", "neighbourhood_group_cleansed", "first_review", "last_review")]
View(Airbnb_Reviews)
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting host_since date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date))
#Creating a new yy-mm variable
reviews$date <- as.yearmon(reviews$date, "%Y-%m")
View(reviews)
reviews$count <- 1
agg_reviews <- tally(group_by(id, year_month))
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting host_since date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date))
#Creating a new yy-mm variable
reviews$year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, id, year_month))
agg_reviews <- tally(group_by(reviews, reviews$id, reviews$year_month))
agg_reviews <- tally(group_by(reviews, reviews$id, reviews$year_month))
agg_reviews <- tally(group_by(reviews, listings_id, year_month))
agg_reviews <- tally(group_by(reviews, listing_id, year_month))
View(agg_reviews)
names(agg_review) <- c("id", "year_month", "new_reviews")
names(agg_reviews) <- c("id", "year_month", "new_reviews")
#Splitting host_since date up into its elements
listings <- mutate(listings, date = ymd(listings$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date))
#Creating a new yy-mm variable
listings$year_month <- as.yearmon(listings$host_since, "%Y-%m")
#Creating a counting variable
listings$count <- 1
#Creating a unique neighbourhood ID (NID)
listings$NID [listings$neighbourhood_group_cleansed == "Mitte"] <- 1
listings$NID [listings$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
listings$NID [listings$neighbourhood_group_cleansed == "Pankow"] <- 3
listings$NID [listings$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
listings$NID [listings$neighbourhood_group_cleansed == "Spandau"] <- 5
listings$NID [listings$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
listings$NID [listings$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
listings$NID [listings$neighbourhood_group_cleansed == "Neukölln"] <- 8
listings$NID [listings$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
listings$NID [listings$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
listings$NID [listings$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
listings$NID [listings$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
#Making aggregate data by district and month by counting the number of new apts per month in each district
agg_listings <- tally(group_by(listings, NID, year_month))
#Names "agg_listings" columns
names(agg_listings) <- c("NID", "year_month", "apt_new")
airbnb_complete <- merge(listings, agg_reviews, by=c("id", "year_month"), all.x = TRUE, all.y = TRUE)
View(airbnb_complete)
airbnb_complete <- merge(listings, agg_reviews, by=c("id", "year_month"), all.x = TRUE)
View(airbnb_complete)
