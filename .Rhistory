test_macro$sum <- ave(test_macro$apt_new, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$NID, test_macro$year_month, FUN=sum)
parse_date_time(test1$year_month)
parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month)
host_since_month = month(date), host_since_year = year(date), host_since_YM = year_month(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, "%Y%m") ##doesnt seem to work
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
test1$YM <- as.Date(test1$year_month, format="%Y%M") ##doesnt seem to work
test1$host_since_year <- as.Date(test1$host_since_month)
test1$host_since_year <- as.Date(test1$host_since_month, "%Y")
test1$host_since_year <- as.Date(test1$host_since_year, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
levels test1$host_since_month
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
View(test1)
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review"
"last_review")]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review",
"last_review")]
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elements
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(x=Year)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
#loading graphs packages
library(ggplot2)
library(grid)
library(scales)
library(RColorBrewer)
library(stargazer)
View(ILOSTAT)
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & y=X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ggplot(ILOSTAT, aes(x=Year, y=X55_64)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(Year, X55_64)) + geom_line() +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
scale_x_date(format = "%Y") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers Age 65+") +
title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
library(reshape2)
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
View(ILOSTAT_m)
#ILO Stat for graph - Labour force participation rate by sex and age (%) - Germany (Source: ILO, 2015)
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle="Labour force participation rate age in Germany (2000 - 2015)" +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle=("Labour force participation rate age in Germany (2000 - 2015)") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
#Set working directory
try(setwd("/Users/Paulo/GitHub/FinalPaper/code"),silent=TRUE)
try(setwd("/Users/djm113/Documents/GitHub/FinalPaper/code"),silent=TRUE)
#Dynamical link
source('merge.R')
##### Data Prep and descriptive analysis using the static supply #####
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "hotels" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((as.character(analysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
analysis_simple$AB_supply_2 <- analysis_simple$AB_supply*analysis_simple$AB_supply
###### Data Prep and descriptive analysis using the dynmic supply ######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse((as.character(danalysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
danalysis_simple$AB_supply_2 <- danalysis_simple$AB_supply*danalysis_simple$AB_supply
##### Inferent Statistics #####
LMI <- function(x, y) {
(lm(x ~ log_ABsupply + NID + factor_ym, data=y))
}
FEI <- function(x, y) {
(plm(x ~ log_ABsupply, data=y, index=c("NID", "factor_ym"), model="within"))
}
FEII <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + log_inc + ue_rate, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIII <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry
FEIV <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry + nonlinear
FEV <- function(x, y) {
plm(x ~ AB_supply + AB_supply_2 + log_inc + ue_rate + marketentry, data=y, index=c("NID", "factor_ym"), model="within")
}
View(analysis_simple)
Airportarrivals <- read.csv("~/GitHub/FinalPaper/data/Airportarrivals.csv", sep=";")
View(Airportarrivals)
Airportarrivals <- read.csv("~/GitHub/FinalPaper/data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- read.csv("Airportarrivals.csv", sep=";", header = TRUE)
# Set working directory
try(setwd("/Users/Paulo/GitHub/FinalPaper/"),silent=TRUE)
try(setwd("/Users/djm113/Documents/GitHub/FinalPaper/"),silent=TRUE)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
View(analysis_data)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
View(Airportarrivals)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
names(Airportarrivals$REP_AIRP.TIME) <- "year_month"
names(Airportarrivals$REP_AIRP.TIME) <- "year_month"
names(Airportarrivals$REP_AIRP.TIME) <- c("year_month")
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
View(Airportarrivals)
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
View(analysis_data)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
View(Airportarrivals)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
View(Airportarrivals)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
View(Airportarrivals)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
View(Airportarrivals)
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
Airportarrivals$year_month <- as.Date(as.yearmon(Airportarrivals$year_month))
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.Date(as.yearmon(Airportarrivals$year_month))
Airportarrivals <- read.csv("data/Airportarrivals.csv", sep=";", header = TRUE)
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.Date(as.yearmon(Airportarrivals$year_month))
View(Airportarrivals)
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month))
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
View(danalysis_simple)
View(analysis_simple)
analysis_data <- merge(FSO_SBB, Airportarrivals, by=c("year_month"), all.x = TRUE) ##static supply
View(analysis_data)
Airportarrivals$year_month <- as.factor(Airportarrivals$year_month)
analysis_data <- merge(FSO_SBB, Airportarrivals, by=c("year_month"), all.x = TRUE) ##static supply
life_listings1 <- merge(FSO_SBB, Airportarrivals, by=c("year_month"), all.x = TRUE) ##dynamic supply
View(life_listings1)
##### Data Prep and descriptive analysis using the static supply #####
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((as.character(analysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
analysis_simple$AB_supply_2 <- analysis_simple$AB_supply*analysis_simple$AB_supply
###### Data Prep and descriptive analysis using the dynmic supply ######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse((as.character(danalysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
danalysis_simple$AB_supply_2 <- danalysis_simple$AB_supply*danalysis_simple$AB_supply
View(ddata_2010_2014)
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
View(ddata_2010_2014)
#Merge data GENE
FSO_SBB1 <- merge(SBB_2010_2015_merge, GENESIS_merge, by=c("NID", "year"), all.x = TRUE, all.y = TRUE)
FSO_SBB2 <- merge(FSO_SBB1, SBB_HH_Income_merge, by=c("NID", "year"), all.x = TRUE)
FSO_SBB <- merge(FSO_SBB2, SBB_unemployment_merge, by=c("NID", "year"), all.x = TRUE)
#Putting Neighborhood ID's (NID's) in order
FSO_SBB <- FSO_SBB[order(FSO_SBB$NID, decreasing = FALSE), ]
FSO_SBB <- FSO_SBB[which(FSO_SBB$year < 2015),]
FSO_SBB$NID <- as.numeric(FSO_SBB$NID)
FSO_SBB$year_month <- as.factor(FSO_SBB$year_month)
#Calculating hotel occupancy rate per month/year and district
FSO_SBB$month <- as.factor(FSO_SBB$month)
FSO_SBB$occup_rate <- FSO_SBB$nights/(FSO_SBB$beds*30)
FSO_SBB$occup_rate[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12] <- FSO_SBB$nights[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]/(FSO_SBB$beds[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]*31)
FSO_SBB$occup_rate[FSO_SBB$month == 4 | 6 | 9 | 11] <- FSO_SBB$nights[FSO_SBB$month == 4 | 6 | 9 | 11]/(FSO_SBB$beds[FSO_SBB$month == 4 | 6 | 9 | 11]*30)
FSO_SBB$occup_rate[FSO_SBB$month == 2 ] <- FSO_SBB$nights[FSO_SBB$month == 2 ]/(FSO_SBB$beds[FSO_SBB$month == 2 ]*28)
#Final merge, creates our comprehensive data frame
agg_listings_merge$year_month <- as.factor(agg_listings_merge$year_month)
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE) ##static supply
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE) ##dynamic supply
#Merging with Airport data
#Preparing passenger stats for merge
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
Airportarrivals$year_month <- as.factor(Airportarrivals$year_month)
analysis_data <- merge(FSO_SBB, Airportarrivals, by=c("year_month"), all.x = TRUE) ##static supply
life_listings1 <- merge(FSO_SBB, Airportarrivals, by=c("year_month"), all.x = TRUE) ##dynamic supply
##### Data Prep and descriptive analysis using the static supply #####
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((as.character(analysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
analysis_simple$AB_supply_2 <- analysis_simple$AB_supply*analysis_simple$AB_supply
###### Data Prep and descriptive analysis using the dynmic supply ######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse((as.character(danalysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
danalysis_simple$AB_supply_2 <- danalysis_simple$AB_supply*danalysis_simple$AB_supply
#Merge data GENE
FSO_SBB1 <- merge(SBB_2010_2015_merge, GENESIS_merge, by=c("NID", "year"), all.x = TRUE, all.y = TRUE)
FSO_SBB2 <- merge(FSO_SBB1, SBB_HH_Income_merge, by=c("NID", "year"), all.x = TRUE)
FSO_SBB <- merge(FSO_SBB2, SBB_unemployment_merge, by=c("NID", "year"), all.x = TRUE)
#Putting Neighborhood ID's (NID's) in order
FSO_SBB <- FSO_SBB[order(FSO_SBB$NID, decreasing = FALSE), ]
FSO_SBB <- FSO_SBB[which(FSO_SBB$year < 2015),]
FSO_SBB$NID <- as.numeric(FSO_SBB$NID)
FSO_SBB$year_month <- as.factor(FSO_SBB$year_month)
#Calculating hotel occupancy rate per month/year and district
FSO_SBB$month <- as.factor(FSO_SBB$month)
FSO_SBB$occup_rate <- FSO_SBB$nights/(FSO_SBB$beds*30)
FSO_SBB$occup_rate[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12] <- FSO_SBB$nights[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]/(FSO_SBB$beds[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]*31)
FSO_SBB$occup_rate[FSO_SBB$month == 4 | 6 | 9 | 11] <- FSO_SBB$nights[FSO_SBB$month == 4 | 6 | 9 | 11]/(FSO_SBB$beds[FSO_SBB$month == 4 | 6 | 9 | 11]*30)
FSO_SBB$occup_rate[FSO_SBB$month == 2 ] <- FSO_SBB$nights[FSO_SBB$month == 2 ]/(FSO_SBB$beds[FSO_SBB$month == 2 ]*28)
#Final merge, creates our comprehensive data frame
agg_listings_merge$year_month <- as.factor(agg_listings_merge$year_month)
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE) ##static supply
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE) ##dynamic supply
#Merging with Airport data
#Preparing passenger stats for merge
Airportarrivals$Arrivals <- Airportarrivals$SXF + Airportarrivals$TXL
Airportarrivals <- Airportarrivals[, c("REP_AIRP.TIME", "Arrivals")]
names(Airportarrivals) <- c("year_month", "arrivals")
Airportarrivals$year_month <- as.yearmon(Airportarrivals$year_month)
Airportarrivals$year_month <- as.factor(Airportarrivals$year_month)
analysis_data <- merge(analysis_data, Airportarrivals, by=c("year_month"), all.x = TRUE) ##static supply
life_listings1 <- merge(life_listings1, Airportarrivals, by=c("year_month"), all.x = TRUE) ##dynamic supply
##### Data Prep and descriptive analysis using the static supply #####
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((as.character(analysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
analysis_simple$AB_supply_2 <- analysis_simple$AB_supply*analysis_simple$AB_supply
###### Data Prep and descriptive analysis using the dynmic supply ######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "arrivals" )]
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse((as.character(danalysis_simple$year_month) < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
danalysis_simple$AB_supply_2 <- danalysis_simple$AB_supply*danalysis_simple$AB_supply
LMI <- function(x, y) {
(lm(x ~ log_ABsupply + NID + factor_ym, data=y))
}
FEI <- function(x, y) {
plm(x ~ log_ABsupply, data=y, index=c("NID", "factor_ym"), model="within")
}
FEII <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIII <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry
FEIV <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry + nonlinear
FEV <- function(x, y) {
plm(x ~ AB_supply + AB_supply_2 + log_inc + ue_rate + marketentry + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
FEII(danalysis_simple$log_ABsupply, danalysis_simple)
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
FEII <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
Model <- FEII(danalysis_simple$nights, danalysis_simple)
Summary(Model)
##### Inferent Statistics #####
LMI <- function(x, y) {
(lm(x ~ log_ABsupply + NID + factor_ym, data=y))
}
FEI <- function(x, y) {
plm(x ~ log_ABsupply, data=y, index=c("NID", "factor_ym"), model="within")
}
FEII <- function(x, y) {
plm(x ~ log_ABsupply + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
FEIII <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry
FEIV <- function(x, y) {
plm(x ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
#Introduces a binary variable for Airbnb's official market entry + nonlinear
FEV <- function(x, y) {
plm(x ~ AB_supply + AB_supply_2 + log_inc + ue_rate + marketentry + arrivals, data=y, index=c("NID", "factor_ym"), model="within")
}
Model <- FEII(danalysis_simple$nights, danalysis_simple)
Summary(Model)
Model <- FEI(danalysis_simple$nights, danalysis_simple)
Summary(Model)
Model <- FEI(nights, danalysis_simple)
Summary(Model)
dd
danalysis_simple
Model <- FEI(nights, danalysis_simple)
Model <- FEI(danalysis_simple$nights, danalysis_simple)
Summary(Model)
ModelII <- LMI(danalysis_simple$nights, danalysis_simple)
Summary(Model)
Summary(ModelII)
ModelII <- LMI(danalysis_simple$nights, danalysis_simple)
Summary(ModelII)
ModelII <- plm(nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + arrivals, data=danalysis_simple, index=c("NID", "factor_ym"), model="within")
Summary(ModelII)
summarise(ModelII)
