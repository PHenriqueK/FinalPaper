#Creating a unique neighbourhood ID (NID)
listings$NID [listings$neighbourhood_group_cleansed == "Mitte"] <- 1
listings$NID [listings$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
listings$NID [listings$neighbourhood_group_cleansed == "Pankow"] <- 3
listings$NID [listings$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
listings$NID [listings$neighbourhood_group_cleansed == "Spandau"] <- 5
listings$NID [listings$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
listings$NID [listings$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
listings$NID [listings$neighbourhood_group_cleansed == "Neukölln"] <- 8
listings$NID [listings$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
listings$NID [listings$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
listings$NID [listings$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
listings$NID [listings$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
############ WIP ###########
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting host_since date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
#Merge reviews and listings data
birthdate <- listings[, c("id", "year_month")]
lifecourse <- merge(agg_reviews, birthdate, by=c("id"), all.x = TRUE)
names(lifecourse) <- c("id", "rev_year_month", "rev_year", "new_reviews", "listingdate")
########################################
#Making aggregate data by district and month by counting the number of new apts per month in each district
agg_listings <- tally(group_by(listings, NID, year_month))
#Names "agg_listings" columns
names(agg_listings) <- c("NID", "year_month", "apt_new")
#Ready to merge
agg_listings_merge <- agg_listings
#Merge data GENE
FSO_SBB1 <- merge(SBB_2010_2015_merge, GENESIS_merge, by=c("NID", "year"), all.x = TRUE, all.y = TRUE)
FSO_SBB2 <- merge(FSO_SBB1, SBB_HH_Income_merge, by=c("NID", "year"), all.x = TRUE)
FSO_SBB <- merge(FSO_SBB2, SBB_unemployment_merge, by=c("NID", "year"), all.x = TRUE)
#Putting Neighborhood ID's (NID's) in order
FSO_SBB <- FSO_SBB[order(FSO_SBB$NID, decreasing = FALSE), ]
#Calculating hotel occupancy rate per month/year and district
FSO_SBB$month <- as.factor(FSO_SBB$month)
FSO_SBB$occup_rate <- FSO_SBB$nights/(FSO_SBB$beds*30)
FSO_SBB$occup_rate[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12] <- FSO_SBB$nights[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]/(FSO_SBB$beds[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]*31)
FSO_SBB$occup_rate[FSO_SBB$month == 4 | 6 | 9 | 11] <- FSO_SBB$nights[FSO_SBB$month == 4 | 6 | 9 | 11]/(FSO_SBB$beds[FSO_SBB$month == 4 | 6 | 9 | 11]*30)
FSO_SBB$occup_rate[FSO_SBB$month == 2 ] <- FSO_SBB$nights[FSO_SBB$month == 2 ]/(FSO_SBB$beds[FSO_SBB$month == 2 ]*28)
#Final merge, creates our comprehensive data frame
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$listing_year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
#Group data
analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[which(!is.finite(analysis_simple$log_ABsupply))] <- 0
analysis_simple$occup_log <- log(analysis_simple$occup_rate)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
ModelA <- plm(occup_log ~ log_ABsupply + avg_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
ModelD <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(NID) + as.factor(year), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelD)
linearHypothesis(ModelD, c("log_ABsupply", "log_ABsupply:AB_supply = 0"), test="F")
linearHypothesis(ModelD, c("AB_supply", "log_ABsupply:AB_supply = 0"), test="F")
ggplot(analysis_simple, aes(x=log_ABsupply, y=occup_log)) +
geom_point(alpha=0.5, color="#c0392b") +
geom_smooth(method = "lm", se = FALSE, color="black", fill="black") +
fte_theme() +
labs(x="Airbnb Listings", y="Hotel Occupance Rate", title="Effect of Airbnb Listings on Hotel Occupancy Rates (2010 - 2014)")
ggplot(analysis_simple, aes(x=log_ABsupply, y=occup_log)) +
geom_point(alpha=0.5, color="#c0392b") +
geom_smooth(method = "lm", se = FALSE, color="black", fill="black") +
fte_theme() +
labs(x="Airbnb Listings", y="Hotel Occupance Rate", title="Effect of Airbnb Listings on Hotel Occupancy Rates (2010 - 2014)")
ggplot(analysis_simple, aes(x=log_ABsupply, y=occup_log)) +
geom_point(alpha=0.5, color="#c0392b") +
geom_smooth(method = "lm", se = FALSE, color="black", fill="black") +
fte_theme() +
labs(x="Airbnb Listings", y="Hotel Occupance Rate", title="Effect of Airbnb Listings on Hotel Occupancy Rates (2010 - 2014)")
ggplot(analysis_simple, aes(x=log_ABsupply, y=occup_log)) +
geom_point(alpha=0.5, color="#c0392b") +
geom_smooth(method = "lm", se = FALSE, color="black", fill="black") +
fte_theme() +
labs(x="Airbnb Listings", y="Hotel Occupance Rate", title="Effect of Airbnb Listings on Hotel Occupancy Rates (2010 - 2014)")
ggplot(analysis_simple, aes(x=AB_supply, y=occup_rate)) +
geom_point(alpha=0.5, color="#c0392b") +
geom_smooth(method = "lm", se = FALSE, color="black", fill="black") +
fte_theme() +
labs(x="Airbnb Listings", y="Hotel Occupance Rate", title="Effect of Airbnb Listings on Hotel Occupancy Rates (2010 - 2014)")
ggplot(analysis_simple, aes(x=AB_supply, y=occup_rate)) +
geom_point(alpha=0.5, color="#c0392b") +
geom_smooth(method = "lm", se = FALSE, color="black", fill="black") +
fte_theme() +
labs(x="Airbnb Listings", y="Hotel Occupance Rate", title="Effect of Airbnb Listings on Hotel Occupancy Rates (2010 - 2014)")
View(analysis_simple)
analysis_simple <- group_by(analysis_simple, NID, year, year_month)
analysis_simple$log_ABsupply[which(!is.finite(analysis_simple$log_ABsupply))] <- 0
ModelA <- plm(occup_log ~ log_ABsupply + avg_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="random")
listings <- Detailed_Listings
listings <- listings[, c("id", "host_id", "host_since", "neighbourhood_group_cleansed", "first_review", "last_review")]
#This deletes 5 Airbnb listings for which there are no dates at all
listings <- listings[!(listings$host_since == "" | is.na(listings$host_since)), ]
listings$host_since <- as.Date(listings$host_since,"%Y-%m-%d")
#Splitting host_since date up into its elements
listings <- mutate(listings, date = ymd(listings$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date))
#Creating a new yy-mm variable
listings$year_month <- as.yearmon(listings$host_since, "%Y-%m")
#Creating a counting variable
listings$count <- 1
#Creating a unique neighbourhood ID (NID)
listings$NID [listings$neighbourhood_group_cleansed == "Mitte"] <- 1
listings$NID [listings$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
listings$NID [listings$neighbourhood_group_cleansed == "Pankow"] <- 3
listings$NID [listings$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
listings$NID [listings$neighbourhood_group_cleansed == "Spandau"] <- 5
listings$NID [listings$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
listings$NID [listings$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
listings$NID [listings$neighbourhood_group_cleansed == "Neukölln"] <- 8
listings$NID [listings$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
listings$NID [listings$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
listings$NID [listings$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
listings$NID [listings$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
############ WIP ###########
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting host_since date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
#Merge reviews and listings data
birthdate <- listings[, c("id", "year_month")]
lifecourse <- merge(agg_reviews, birthdate, by=c("id"), all.x = TRUE)
names(lifecourse) <- c("id", "rev_year_month", "rev_year", "new_reviews", "listingdate")
lifecourse$cycle <- as.yearmon(lifecourse$rev_year_month) - .5
########################################
#Making aggregate data by district and month by counting the number of new apts per month in each district
agg_listings <- tally(group_by(listings, NID, year_month))
#Names "agg_listings" columns
names(agg_listings) <- c("NID", "year_month", "apt_new")
#Ready to merge
agg_listings_merge <- agg_listings
#Merge data GENE
FSO_SBB1 <- merge(SBB_2010_2015_merge, GENESIS_merge, by=c("NID", "year"), all.x = TRUE, all.y = TRUE)
FSO_SBB2 <- merge(FSO_SBB1, SBB_HH_Income_merge, by=c("NID", "year"), all.x = TRUE)
FSO_SBB <- merge(FSO_SBB2, SBB_unemployment_merge, by=c("NID", "year"), all.x = TRUE)
#Putting Neighborhood ID's (NID's) in order
FSO_SBB <- FSO_SBB[order(FSO_SBB$NID, decreasing = FALSE), ]
#Calculating hotel occupancy rate per month/year and district
FSO_SBB$month <- as.factor(FSO_SBB$month)
FSO_SBB$occup_rate <- FSO_SBB$nights/(FSO_SBB$beds*30)
FSO_SBB$occup_rate[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12] <- FSO_SBB$nights[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]/(FSO_SBB$beds[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]*31)
FSO_SBB$occup_rate[FSO_SBB$month == 4 | 6 | 9 | 11] <- FSO_SBB$nights[FSO_SBB$month == 4 | 6 | 9 | 11]/(FSO_SBB$beds[FSO_SBB$month == 4 | 6 | 9 | 11]*30)
FSO_SBB$occup_rate[FSO_SBB$month == 2 ] <- FSO_SBB$nights[FSO_SBB$month == 2 ]/(FSO_SBB$beds[FSO_SBB$month == 2 ]*28)
#Final merge, creates our comprehensive data frame
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$listing_year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
#Group data
analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[which(!is.finite(analysis_simple$log_ABsupply))] <- 0
analysis_simple$occup_log <- log(analysis_simple$occup_rate)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
##Descriptice Statistics
coplot(AB_supply ~ year_month|NID, data=analysis_simple)
plot(AB_supply ~ year_month|NID, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=analysis_simple)
#Fixed effects: Regular OLS regression does not consider heterogeneity across groups or time
#Heterogeneity across years and neighbourhoods/ plotmeans draw a 95% confidence interval around the means
library(foreign)
library(gplots)
plotmeans(occup_log ~ NID, main="Heterogeineity across neighbourhoods", data=analysis_simple)
plotmeans(occup_log ~ year, main="Heterogeineity across years", data=analysis_simple)
##Inferent Statistics
#Fixed or Random Effects? Hausmann Test
#To decide between fixed or random effects you can run a Hausman test where the null hypothesis is that the preferred model
#is random effects vs. the alternative the fixed effects (see Green, 2008, chapter 9). It basically tests whether the unique
#errors (ui) are correlated with the regressors, the null hypothesis is they are not. Run a fixed effects model and save the
#estimates, then run a random model and save the estimates, then perform the test. If the p-value is significant
#(for example <0.05) then use fixed effects, if not use random effects.
random <- plm(occup_log ~ log_ABsupply, data=analysis_simple, index=c("NID", "year_month"), model="random")
fixed <- plm(occup_log ~ log_ABsupply, data=analysis_simple, index=c("NID", "year_month"), model="within")
phtest(fixed, random) #Hausmann Test -> random effects model
#Testing for random effects: Breusch-Pagan Lagrange multiplier (LM)
#The null hypothesis in the LM test is that variances across entities is zero.
#This is, no significant difference across units (i.e. no panel effect).
#Here we do not reject the null hypothesis and conclude that random effects is appropriate.
#This is, there is evidence of significant differences across neighbourhoods, therefore we run a random effects model
pool <- plm(occup_log ~ log_ABsupply , data=analysis_simple, index=c("NID", "year_month"), model="pooling")
plmtest(pool, type=c("bp"))
#Testing time-fixed effects. The null is that no time-fixed effects needed
fixed.time <- plm(occup_log ~ log_ABsupply + as.factor(year_month), data=analysis_simple, index=c("NID", "year_month"), model="within")
pFtest(fixed.time, fixed) #p-value <.05 -> time fixed effects
#Lagrange Multiplier Test - time effects (Breusch-Pagan)
plmtest(fixed, c("time"), type=("bp")) #p-value <.05 -> time fixed effects
#Augmented Dickey-Fuller Test
#The Dickey-Fuller test to check for stochastic trends. The null hypothesis is that the series
#has a unit root (i.e. non-stationary). If unit root is present you can take the first difference
#of the variable.
library(tseries)
Panel.set <- plm.data(analysis_simple, index = c("NID", "year_month"))
adf.test(Panel.set$log_ABsupply, k=2) #p-value <.05 -> no unit roots present
#Model A: includes economic control variables and district dummy
ModelA <- plm(occup_log ~ log_ABsupply + avg_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
View(analysis_data)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
#Group data
analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[which(!is.finite(analysis_simple$log_ABsupply))] <- 0
analysis_simple$occup_log <- log(analysis_simple$occup_rate)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
##Descriptice Statistics
coplot(AB_supply ~ year_month|NID, data=analysis_simple)
plot(AB_supply ~ year_month|NID, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=analysis_simple)
#Fixed effects: Regular OLS regression does not consider heterogeneity across groups or time
#Heterogeneity across years and neighbourhoods/ plotmeans draw a 95% confidence interval around the means
library(foreign)
library(gplots)
plotmeans(occup_log ~ NID, main="Heterogeineity across neighbourhoods", data=analysis_simple)
plotmeans(occup_log ~ year, main="Heterogeineity across years", data=analysis_simple)
##Inferent Statistics
#Fixed or Random Effects? Hausmann Test
#To decide between fixed or random effects you can run a Hausman test where the null hypothesis is that the preferred model
#is random effects vs. the alternative the fixed effects (see Green, 2008, chapter 9). It basically tests whether the unique
#errors (ui) are correlated with the regressors, the null hypothesis is they are not. Run a fixed effects model and save the
#estimates, then run a random model and save the estimates, then perform the test. If the p-value is significant
#(for example <0.05) then use fixed effects, if not use random effects.
random <- plm(occup_log ~ log_ABsupply, data=analysis_simple, index=c("NID", "year_month"), model="random")
fixed <- plm(occup_log ~ log_ABsupply, data=analysis_simple, index=c("NID", "year_month"), model="within")
phtest(fixed, random) #Hausmann Test -> random effects model
#Testing for random effects: Breusch-Pagan Lagrange multiplier (LM)
#The null hypothesis in the LM test is that variances across entities is zero.
#This is, no significant difference across units (i.e. no panel effect).
#Here we do not reject the null hypothesis and conclude that random effects is appropriate.
#This is, there is evidence of significant differences across neighbourhoods, therefore we run a random effects model
pool <- plm(occup_log ~ log_ABsupply , data=analysis_simple, index=c("NID", "year_month"), model="pooling")
plmtest(pool, type=c("bp"))
#Testing time-fixed effects. The null is that no time-fixed effects needed
fixed.time <- plm(occup_log ~ log_ABsupply + as.factor(year_month), data=analysis_simple, index=c("NID", "year_month"), model="within")
pFtest(fixed.time, fixed) #p-value <.05 -> time fixed effects
#Lagrange Multiplier Test - time effects (Breusch-Pagan)
plmtest(fixed, c("time"), type=("bp")) #p-value <.05 -> time fixed effects
#Augmented Dickey-Fuller Test
#The Dickey-Fuller test to check for stochastic trends. The null hypothesis is that the series
#has a unit root (i.e. non-stationary). If unit root is present you can take the first difference
#of the variable.
library(tseries)
Panel.set <- plm.data(analysis_simple, index = c("NID", "year_month"))
adf.test(Panel.set$log_ABsupply, k=2) #p-value <.05 -> no unit roots present
#Model A: includes economic control variables and district dummy
ModelA <- plm(occup_log ~ log_ABsupply + avg_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
ModelD <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(NID) + as.factor(year), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelD)
linearHypothesis(ModelD, c("log_ABsupply", "log_ABsupply:AB_supply = 0"), test="F")
View(lifecourse)
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting host_since date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
#Merge reviews and listings data
birthdate <- listings[, c("id", "year_month")]
lifecourse <- merge(agg_reviews, birthdate, by=c("id"), all.x = TRUE)
View(lifecourse)
listings <- Detailed_Listings
listings <- listings[, c("id", "host_id", "host_since", "neighbourhood_group_cleansed", "first_review", "last_review", "number_of_reviews")]
#This deletes all Airbnb listings for which there exists no review data and which
listings <- listings[!(listings$number_of_reviews == 0), ]
#Computing listing date (6 months prior to first review)
listings$listingdate <- as.Date(as.yearmon(as.Date(listings$first_review)) - .5)
#Splitting listing date up into its elements
listings$listingdate <- as.Date(listings$listingdate,"%Y-%m-%d")
listings <- mutate(listings, date = ymd(listings$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
listings$year_month <- as.yearmon(listings$listingdate, "%Y-%m")
#Creating a counting variable
listings$count <- 1
#Creating a unique neighbourhood ID (NID)
listings$NID [listings$neighbourhood_group_cleansed == "Mitte"] <- 1
listings$NID [listings$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
listings$NID [listings$neighbourhood_group_cleansed == "Pankow"] <- 3
listings$NID [listings$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
listings$NID [listings$neighbourhood_group_cleansed == "Spandau"] <- 5
listings$NID [listings$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
listings$NID [listings$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
listings$NID [listings$neighbourhood_group_cleansed == "Neukölln"] <- 8
listings$NID [listings$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
listings$NID [listings$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
listings$NID [listings$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
listings$NID [listings$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
############ WIP ###########
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
#Merge reviews and listings data
birthdate <- listings[, c("id", "year_month")]
lifecourse <- merge(agg_reviews, birthdate, by=c("id"), all.x = TRUE)
names(lifecourse) <- c("id", "rev_year_month", "rev_year", "new_reviews", "listingdate")
########################################
#Making aggregate data by district and month by counting the number of new apts per month in each district
agg_listings <- tally(group_by(listings, NID, year_month))
#Names "agg_listings" columns
names(agg_listings) <- c("NID", "year_month", "apt_new")
#Ready to merge
agg_listings_merge <- agg_listings
#Merge data GENE
FSO_SBB1 <- merge(SBB_2010_2015_merge, GENESIS_merge, by=c("NID", "year"), all.x = TRUE, all.y = TRUE)
FSO_SBB2 <- merge(FSO_SBB1, SBB_HH_Income_merge, by=c("NID", "year"), all.x = TRUE)
FSO_SBB <- merge(FSO_SBB2, SBB_unemployment_merge, by=c("NID", "year"), all.x = TRUE)
#Putting Neighborhood ID's (NID's) in order
FSO_SBB <- FSO_SBB[order(FSO_SBB$NID, decreasing = FALSE), ]
#Calculating hotel occupancy rate per month/year and district
FSO_SBB$month <- as.factor(FSO_SBB$month)
FSO_SBB$occup_rate <- FSO_SBB$nights/(FSO_SBB$beds*30)
FSO_SBB$occup_rate[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12] <- FSO_SBB$nights[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]/(FSO_SBB$beds[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]*31)
FSO_SBB$occup_rate[FSO_SBB$month == 4 | 6 | 9 | 11] <- FSO_SBB$nights[FSO_SBB$month == 4 | 6 | 9 | 11]/(FSO_SBB$beds[FSO_SBB$month == 4 | 6 | 9 | 11]*30)
FSO_SBB$occup_rate[FSO_SBB$month == 2 ] <- FSO_SBB$nights[FSO_SBB$month == 2 ]/(FSO_SBB$beds[FSO_SBB$month == 2 ]*28)
#Final merge, creates our comprehensive data frame
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
#Group data
analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[which(!is.finite(analysis_simple$log_ABsupply))] <- 0
analysis_simple$occup_log <- log(analysis_simple$occup_rate)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
##Descriptice Statistics
coplot(AB_supply ~ year_month|NID, data=analysis_simple)
plot(AB_supply ~ year_month|NID, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=analysis_simple)
#Fixed effects: Regular OLS regression does not consider heterogeneity across groups or time
#Heterogeneity across years and neighbourhoods/ plotmeans draw a 95% confidence interval around the means
library(foreign)
library(gplots)
plotmeans(occup_log ~ NID, main="Heterogeineity across neighbourhoods", data=analysis_simple)
plotmeans(occup_log ~ year, main="Heterogeineity across years", data=analysis_simple)
##Inferent Statistics
#Fixed or Random Effects? Hausmann Test
#To decide between fixed or random effects you can run a Hausman test where the null hypothesis is that the preferred model
#is random effects vs. the alternative the fixed effects (see Green, 2008, chapter 9). It basically tests whether the unique
#errors (ui) are correlated with the regressors, the null hypothesis is they are not. Run a fixed effects model and save the
#estimates, then run a random model and save the estimates, then perform the test. If the p-value is significant
#(for example <0.05) then use fixed effects, if not use random effects.
random <- plm(occup_log ~ log_ABsupply, data=analysis_simple, index=c("NID", "year_month"), model="random")
fixed <- plm(occup_log ~ log_ABsupply, data=analysis_simple, index=c("NID", "year_month"), model="within")
phtest(fixed, random) #Hausmann Test -> random effects model
#Testing for random effects: Breusch-Pagan Lagrange multiplier (LM)
#The null hypothesis in the LM test is that variances across entities is zero.
#This is, no significant difference across units (i.e. no panel effect).
#Here we do not reject the null hypothesis and conclude that random effects is appropriate.
#This is, there is evidence of significant differences across neighbourhoods, therefore we run a random effects model
pool <- plm(occup_log ~ log_ABsupply , data=analysis_simple, index=c("NID", "year_month"), model="pooling")
plmtest(pool, type=c("bp"))
#Testing time-fixed effects. The null is that no time-fixed effects needed
fixed.time <- plm(occup_log ~ log_ABsupply + as.factor(year_month), data=analysis_simple, index=c("NID", "year_month"), model="within")
pFtest(fixed.time, fixed) #p-value <.05 -> time fixed effects
#Lagrange Multiplier Test - time effects (Breusch-Pagan)
plmtest(fixed, c("time"), type=("bp")) #p-value <.05 -> time fixed effects
#Augmented Dickey-Fuller Test
#The Dickey-Fuller test to check for stochastic trends. The null hypothesis is that the series
#has a unit root (i.e. non-stationary). If unit root is present you can take the first difference
#of the variable.
library(tseries)
Panel.set <- plm.data(analysis_simple, index = c("NID", "year_month"))
adf.test(Panel.set$log_ABsupply, k=2) #p-value <.05 -> no unit roots present
#Model A: includes economic control variables and district dummy
ModelA <- plm(occup_log ~ log_ABsupply + avg_inc + ue_rate, data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
ModelD <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(NID) + as.factor(year), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelD)
listings <- Detailed_Listings
listings <- listings[, c("id", "neighbourhood_group_cleansed", "first_review", "last_review", "number_of_reviews")]
#This deletes all Airbnb listings for which there exists no review data and which
listings <- listings[!(listings$number_of_reviews == 0), ]
#Computing listing date (6 months prior to first review)
listings$listingdate <- as.Date(as.yearmon(as.Date(listings$first_review)) - .5)
#Splitting listing date up into its elements
listings$listingdate <- as.Date(listings$listingdate,"%Y-%m-%d")
listings <- mutate(listings, date = ymd(listings$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
listings$year_month <- as.yearmon(listings$listingdate, "%Y-%m")
#Creating a counting variable
listings$count <- 1
#Creating a unique neighbourhood ID (NID)
listings$NID [listings$neighbourhood_group_cleansed == "Mitte"] <- 1
listings$NID [listings$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
listings$NID [listings$neighbourhood_group_cleansed == "Pankow"] <- 3
listings$NID [listings$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
listings$NID [listings$neighbourhood_group_cleansed == "Spandau"] <- 5
listings$NID [listings$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
listings$NID [listings$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
listings$NID [listings$neighbourhood_group_cleansed == "Neukölln"] <- 8
listings$NID [listings$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
listings$NID [listings$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
listings$NID [listings$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
listings$NID [listings$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
############ WIP ###########
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
#Merge reviews and listings data
birthdate <- listings[, c("id", "year_month")]
lifecourse <- merge(agg_reviews, birthdate, by=c("id"), all.x = TRUE)
names(lifecourse) <- c("id", "rev_year_month", "rev_year", "new_reviews", "listingdate")
########################################
#Making aggregate data by district and month by counting the number of new apts per month in each district
agg_listings <- tally(group_by(listings, NID, year_month))
#Names "agg_listings" columns
names(agg_listings) <- c("NID", "year_month", "apt_new")
#Ready to merge
agg_listings_merge <- agg_listings
View(lifecourse)
ModelB <- plm(occup_log ~ log_ABsupply + as.factor(NID) + as.factor(year_month), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
ModelB <- plm(occup_log ~ log_ABsupply + as.factor(NID) + as.factor(year_month), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
ModelA <- plm(occup_log ~ log_ABsupply + as.factor(NID) + as.factor(year_month), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelA)
as.factor
ModelB2 <- plm(occup_log ~ log_ABsupply + avg_inc + ue_rate+ as.factor(NID) + as.factor(year), data=analysis_simple, index=c("NID", "year_month"), model="random")
summary(ModelB)
summary(ModelB2)
View(birthdate)
View(birthdate)
View(analysis_simple)
subset_mitte <- subset(analysis_simple, analysis_simple$NID==1)
ModelE <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(NID) + as.factor(year), data=subset_mitte, index=c("NID", "year_month"), model="random")
ModelE <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year_month), data=subset_mitte, index=c("NID", "year_month"), model="random")
ModelE <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year_month), data=subset_mitte, index=c("year_month"), model="random")
ModelE <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year_month), data=subset_mitte, index=c("year_month"), model="within")
View(subset_mitte)
ModelE <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year_month), data=subset_mitte, index="year_month", model="within")
ModelE <- plm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year_month), data=subset_mitte, index="year_month", model="random")
summary(ModelE)
ModelE <- lm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year_month), data=subset_mitte)
summary(ModelE)
View(subset_mitte)
View(subset_mitte)
ModelE <- lm(occup_log ~ log_ABsupply + log_ABsupply*AB_supply + marketentry + avg_inc + ue_rate + as.factor(year), data=subset_mitte)
summary(ModelE)
View(Detailed_Listings)
listings <- listings[, c("id", "neighbourhood_group_cleansed", "first_review", "last_review", "number_of_reviews", "room_type")]
# Creating end of year subset
NID_Subset <- subset(analysis_simple, analysis_simple$month==12)
ggplot(NID_Subset, aes(x=year, y=AB_supply, group=NID)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Airbnb Listings", title="Growth of Airbnb Listings in Berlin (2010 - 2014)")
ggplot(NID_Subset, aes(x=year, y=mean(log_ABsupply), group=NID)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Airbnb Listings", title="Growth of Airbnb Listings in Berlin (2010 - 2014)")
