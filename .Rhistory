[1] "German_Germany.1252"
Sys.setlocale("LC_TIME", "English")
[1] "English_United States.1252"
test1$year_month <- as.Date(test1$year_month, "%Y_%m")
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "_" ))
##create a unique neighbourhood ID (NID)
test1$NID [test1$neighbourhood_group_cleansed == "Mitte"] <- 1
test1$NID [test1$neighbourhood_group_cleansed == "Friedrichshain-Kreuzberg"] <- 2
test1$NID [test1$neighbourhood_group_cleansed == "Pankow"] <- 3
test1$NID [test1$neighbourhood_group_cleansed == "Charlottenburg-Wilm."] <- 4
test1$NID [test1$neighbourhood_group_cleansed == "Spandau"] <- 5
test1$NID [test1$neighbourhood_group_cleansed == "Steglitz - Zehlendorf"] <- 6
test1$NID [test1$neighbourhood_group_cleansed == "Tempelhof - Schöneberg"] <- 7
test1$NID [test1$neighbourhood_group_cleansed == "Neukölln"] <- 8
test1$NID [test1$neighbourhood_group_cleansed == "Treptow - Köpenick"] <- 9
test1$NID [test1$neighbourhood_group_cleansed == "Marzahn - Hellersdorf"] <- 10
test1$NID [test1$neighbourhood_group_cleansed == "Lichtenberg"] <- 11
test1$NID [test1$neighbourhood_group_cleansed == "Reinickendorf"] <- 12
# count # of new apts per month per year per district
test_macro <- count(test1, c("NID", "year_month"))
#rename columns for merging
names(test_macro) <- c("NID", "year_month", "apt_new")
#reorder data
test_macro <- test_macro[order(test_macro$NID, test_macro$year_month, decreasing = FALSE), ]
test_macro_sum <-  test_macro$sum <- ave(test_macro$NID, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$year_month, FUN=sum)
test_macro$sum <- ave(test_macro$apt_new, test_macro$NID, test_macro$year_month, FUN=sum)
parse_date_time(test1$year_month)
parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date_time(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month, c('YM'))
test1$YM <- parse_date(test1$year_month)
host_since_month = month(date), host_since_year = year(date), host_since_YM = year_month(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$year_month <- as.Date(test1$year_month, "%Y_%m") ##doesnt seem to work
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds",
"last_review")]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elemnts
##create a new yy-mm variable
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, "%Y%m") ##doesnt seem to work
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
test1$YM <- as.Date(test1$year_month, format="%Y%M") ##doesnt seem to work
test1$host_since_year <- as.Date(test1$host_since_month)
test1$host_since_year <- as.Date(test1$host_since_month, "%Y")
test1$host_since_year <- as.Date(test1$host_since_year, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%Y")
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
levels test1$host_since_month
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
View(test1)
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds","first_review"
"last_review")]
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review"
"last_review")]
test1 <- Detailed_Listings ## this was just for testing purposes to avoid to reload the original data all over again every time replace test1 by the Detailed_Listings!
test1 <- test1[, c("id", "host_id", "host_since",
"neighbourhood_group_cleansed",
"room_type",
"beds", "first_review",
"last_review")]
test1 <- test1[!(test1$host_since == "" | is.na(test1$host_since)), ]
test1 <- mutate(test1, date = ymd(test1$host_since), host_since_day = day(date),
host_since_month = month(date), host_since_year = year(date)) ##spliting host_since date up into its elements
test1$host_since_month <- as.Date(test1$host_since_month, "%m")
test1$year_month <- as.character(paste(test1$host_since_year, test1$host_since_month, sep = "-" ))
test1$YM <- as.Date(test1$year_month, format="%Y%m") ##doesnt seem to work
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(x=Year)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
#loading graphs packages
library(ggplot2)
library(grid)
library(scales)
library(RColorBrewer)
library(stargazer)
View(ILOSTAT)
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate by and age (%) (1960 - 2015")
ggplot(ILOSTAT, aes(x=Year, y=X55_64 & y=X65.)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ggplot(ILOSTAT, aes(x=Year, y=X55_64)) +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
labs(x="Year", y="Labour Force Participation Rate of Workers Age 65+", title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ggplot(ILOSTAT, aes(Year, X55_64)) + geom_line() +
geom_line(alpha=0.5, color="#c0392b") +
fte_theme () +
scale_x_date(format = "%Y") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers Age 65+") +
title=" German labour force participation rate (1960 - 2015)")
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
library(reshape2)
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
View(ILOSTAT_m)
#ILO Stat for graph - Labour force participation rate by sex and age (%) - Germany (Source: ILO, 2015)
ILOSTAT <- read.csv2("~/Documents/WSDC/ILOSTAT.csv")
ILOSTAT_m <- melt(ILOSTAT, id.vars='Year')
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle="Labour force participation rate age in Germany (2000 - 2015)" +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
ggplot(ILOSTAT_m, aes(Year, value, colour=variable)) +
geom_line() +
fte_theme () +
ggtitle=("Labour force participation rate age in Germany (2000 - 2015)") +
xlab("Year") +
ylab("Labour Force Participation Rate of Workers") +
labs(colour="Legend text")
#Set working directory
try(setwd("/Users/Paulo/GitHub/FinalPaper/code"),silent=TRUE)
try(setwd("/Users/djm113/Documents/GitHub/FinalPaper/code"),silent=TRUE)
#Dynamical link
source('merge.R')
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
#Group data
#analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$year <- as.numeric(analysis_simple$year)
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
#Calculate bed growth
life_reshape$listing_year <- NULL
#####################
## R source to first pair assignment
## Dan Murphy & Paulo Kalkhake
## Last update: 3 October 2016
## Last update: 11 November 2016
## R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## What it does: clean inside Airbnb data
## What it does: Cleans Airbnb data
##########################
reviews <- Airbnb_Reviews
reviews$date <- as.Date(reviews$date,"%Y-%m-%d")
#Splitting reviews date up into its elements
reviews <- mutate(reviews, date = ymd(reviews$date), rev_day = day(date), rey_month = month(date), rev_year = year(date))
#Creating a new yy-mm variable
reviews$rev_year_month <- as.yearmon(reviews$date, "%Y-%m")
reviews$count <- 1
agg_reviews <- tally(group_by(reviews, listing_id, rev_year_month, rev_year))
names(agg_reviews) <- c("id", "rev_year_month", "rev_year", "new_reviews")
agg_reviews <- agg_reviews[which(agg_reviews$rev_year < 2015),]
agg_reviews$new_reviews[agg_reviews$new_reviews >= "1"] <- 1
agg_reviews_time <- expand.grid(id = unique(agg_reviews$id),
rev_year_month = unique(agg_reviews$rev_year_month))
lifecycle <- merge(agg_reviews, agg_reviews_time, all = TRUE)
id_NID <- listings[, c("id", "host_since", "first_review", "NID")]
lifecycle_NID <- merge(lifecycle, id_NID, by = c("id"), all = TRUE)
lifecycle_NID$new_reviews[is.na(lifecycle_NID$new_reviews)] <- 0
#Computing listing date (6 months prior to first review)
#lifecycle_NID$listingdate <- as.Date(as.yearmon(as.Date(lifecycle_NID$first_review)) - .5)
lifecycle_NID$listingdate <- lifecycle_NID$first_review
#Splitting listing date up into its elements
lifecycle_NID$listingdate <- as.Date(lifecycle_NID$listingdate,"%Y-%m-%d")
lifecycle_NID <- mutate(lifecycle_NID, date = ymd(lifecycle_NID$listingdate), listing_day = day(date),
listing_month = month(date), listing_year = year(date))
#Creating a new yy-mm variable
lifecycle_NID$year_month <- as.yearmon(lifecycle_NID$listingdate, "%Y-%m")
lifecourse <- lifecycle_NID[, c("id", "NID", "rev_year_month", "year_month", "listing_year", "new_reviews")]
lifecourse <- lifecourse[which(lifecourse$listing_year < 2015),]
get.mav <- function(bp,n=7){
require(zoo)
if(is.na(bp[1])) bp[7] <- sum(bp,na.rm=TRUE)
bp <- na.locf(bp,na.rm=FALSE)
if(length(bp)<n) return(bp)
c(bp[1:(n-7)],rollapply(bp,width=n,sum,align="right"))
}
library(data.table)
setDT(lifecourse)     # converts test to a data.table in place
setkey(lifecourse,id,rev_year_month)
lifecourse[,life:=as.numeric(get.mav(new_reviews,7)),by=id]
lifecourse$life [lifecourse$new_reviews == 1] <- 1
lifecourse$new_reviews [lifecourse$rev_year_month == lifecourse$year_month] <- 1
lifecourse$count [lifecourse$life >= 1] <- 1
lifecourse$count [is.na(lifecourse$count)] <- 0
life_reshape <- lifecourse
life_reshape$year_month <- NULL
life_reshape$listing_year <- NULL
life_reshape$new_reviews <- NULL
life_reshape$life <- NULL
life_long <- cast(life_reshape, id ~ rev_year_month)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
life_long_NID$id <- NULL
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(reshape)
library(reshape2)
life_long <- cast(life_reshape, id ~ rev_year_month)
life_long_NID <- merge(life_long, id_NID, by = c("id"))
life_long_NID <- life_long_NID[, -(2:5)]
life_long_NID$host_since <- NULL
life_long_NID$first_review <- NULL
life_long_NID$id <- NULL
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
View(life_long_NID)
melt.df <- melt(life_long_NID, id.vars=c("NID"))
life_listings <- aggregate(melt.df$value, by=list(NID=melt.df$NID, year_month=melt.df$variable), FUN=sum)
View(life_listings)
names(life_listings) <- c("NID", "year_month", "AB_supply")
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE)
View(life_listings1)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
ddata_2010_2014$apt_new[is.na(ddata_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
ddata_2010_2014$AB_supply <- ave(ddata_2010_2014$apt_new, ddata_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Group data
#danalysis_simple <- group_by(danalysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse ((danalysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
ddata_2010_2014$apt_new[is.na(ddata_2010_2014$apt_new)] <- 0
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Group data
#danalysis_simple <- group_by(danalysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse ((danalysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
ddata_2010_2014$apt_new[is.na(ddata_2010_2014$apt_new)] <- 0
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Group data
#danalysis_simple <- group_by(danalysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse ((danalysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#ddata_2010_2014$apt_new[is.na(ddata_2010_2014$apt_new)] <- 0
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Group data
#danalysis_simple <- group_by(danalysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse ((danalysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
View(danalysis_simple)
View(ddata_2010_2014)
View(life_listings1)
View(life_listings)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE, all.y = TRUE)
######
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#ddata_2010_2014$apt_new[is.na(ddata_2010_2014$apt_new)] <- 0
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Group data
#danalysis_simple <- group_by(danalysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse ((danalysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
View(ddata_2010_2014)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE, all.y = TRUE)
View(life_listings1)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE)
View(life_listings1)
life_listings1 <- merge(life_listings, FSO_SBB, by=c("NID", "year_month"), all.x = TRUE)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"))
View(life_listings1)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all = TRUE)
View(life_listings1)
View(FSO_SBB)
FSO_SBB <- FSO_SBB[which(FSO_SBB$year < 2015),]
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all = TRUE)
View(life_listings)
FSO_SBB$NID <- as.factor(FSO_SBB$NID)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all = TRUE)
View(life_listings1)
View(FSO_SBB)
FSO_SBB$NID <- as.numeric(FSO_SBB$NID)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all = TRUE)
life_listings$NID <- as.numeric(life_listings$NID)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all = TRUE)
View(life_listings1)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.y = TRUE)
View(life_listings1)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"))
life_listings$NID <- as.factor(life_listings$NID)
FSO_SBB$year_month <- as.factor(FSO_SBB$year_month)
life_listings1 <- append(FSO_SBB, life_listings, by=c("NID", "year_month"), all.y = TRUE)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE)
View(life_listings1)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
ddata_2010_2014 <- life_listings1[which(life_listings1$year < 2015),]
#ddata_2010_2014$apt_new[is.na(ddata_2010_2014$apt_new)] <- 0
#Dropping variables not needed for further analysis
danalysis_simple <- ddata_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
danalysis_simple$NID <- as.factor(danalysis_simple$NID)
danalysis_simple$factor_ym <- as.factor(danalysis_simple$year_month)
#Group data
#danalysis_simple <- group_by(danalysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
danalysis_simple$log_ABsupply <- log(danalysis_simple$AB_supply)
danalysis_simple$log_ABsupply[danalysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
danalysis_simple$log_nights <- log(danalysis_simple$nights)
danalysis_simple$log_inc <- log(danalysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
danalysis_simple$year <- as.numeric(danalysis_simple$year)
danalysis_simple$marketentry <- ifelse ((danalysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
danalysis_simple$logABAB <- danalysis_simple$AB_supply*danalysis_simple$log_ABsupply
ModelIa <- plm(log_nights ~ log_ABsupply, data=danalysis_simple, index=c("NID", "factor_ym"), model="within")
ModelDI <- plm(log_nights ~ log_ABsupply, data=danalysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelDI)
ModelDI <- plm(log_nights ~ log_ABsupply  + AB_supply + logABAB + log_inc + ue_rate, data=danalysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelDI)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
View(analysis_simple)
View(GENESIS)
GENESIS_merge <- GENESIS[, c("NID", "year", "beds", "hotels")]
#Merge data GENE
FSO_SBB1 <- merge(SBB_2010_2015_merge, GENESIS_merge, by=c("NID", "year"), all.x = TRUE, all.y = TRUE)
FSO_SBB2 <- merge(FSO_SBB1, SBB_HH_Income_merge, by=c("NID", "year"), all.x = TRUE)
FSO_SBB <- merge(FSO_SBB2, SBB_unemployment_merge, by=c("NID", "year"), all.x = TRUE)
#Putting Neighborhood ID's (NID's) in order
FSO_SBB <- FSO_SBB[order(FSO_SBB$NID, decreasing = FALSE), ]
FSO_SBB <- FSO_SBB[which(FSO_SBB$year < 2015),]
FSO_SBB$NID <- as.numeric(FSO_SBB$NID)
FSO_SBB$year_month <- as.factor(FSO_SBB$year_month)
#Calculating hotel occupancy rate per month/year and district
FSO_SBB$month <- as.factor(FSO_SBB$month)
FSO_SBB$occup_rate <- FSO_SBB$nights/(FSO_SBB$beds*30)
FSO_SBB$occup_rate[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12] <- FSO_SBB$nights[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]/(FSO_SBB$beds[FSO_SBB$month == 1 | 3 | 5 | 7 | 8 | 10 | 12]*31)
FSO_SBB$occup_rate[FSO_SBB$month == 4 | 6 | 9 | 11] <- FSO_SBB$nights[FSO_SBB$month == 4 | 6 | 9 | 11]/(FSO_SBB$beds[FSO_SBB$month == 4 | 6 | 9 | 11]*30)
FSO_SBB$occup_rate[FSO_SBB$month == 2 ] <- FSO_SBB$nights[FSO_SBB$month == 2 ]/(FSO_SBB$beds[FSO_SBB$month == 2 ]*28)
#Final merge, creates our comprehensive data frame
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE)
life_listings1 <- merge(FSO_SBB, life_listings, by=c("NID", "year_month"), all.x = TRUE)
View(agg_listings_merge)
agg_listings_merge$year_month <- as.factor(agg_listings_merge$year_month)
analysis_data <- merge(FSO_SBB, agg_listings_merge, by=c("NID", "year_month"), all.x = TRUE)
#Drop observations for 2015 and further (research focus lies on time period between 2010 and 2014)
data_2010_2014 <- analysis_data[which(analysis_data$year < 2015),]
data_2010_2014$apt_new[is.na(data_2010_2014$apt_new)] <- 0
#Cumulative sum of new appartments/month per district
data_2010_2014$AB_supply <- ave(data_2010_2014$apt_new, data_2010_2014$NID, FUN=cumsum)
#Dropping variables not needed for further analysis
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Group data
#analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$year <- as.numeric(analysis_simple$year)
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
View(analysis_simple)
analysis_simple <- data_2010_2014[, c("NID", "neighbourhood", "year_month", "year", "month", "occup_rate", "AB_supply", "avg_inc", "ue_rate", "guests", "beds", "nights", "hotels" )]
analysis_simple$NID <- as.factor(analysis_simple$NID)
analysis_simple$factor_ym <- as.factor(analysis_simple$year_month)
analysis_simple$neighbourhood <- substring(analysis_simple$neighbourhood, 3)
#Group data
#analysis_simple <- group_by(analysis_simple, NID, year, year_month)
#Log Airbnb apt supply and hotel occupancy rate
analysis_simple$log_ABsupply <- log(analysis_simple$AB_supply)
analysis_simple$log_ABsupply[analysis_simple$log_ABsupply=="-Inf"] <- 0
#logging nights & average income per district
analysis_simple$log_nights <- log(analysis_simple$nights)
analysis_simple$log_inc <- log(analysis_simple$avg_inc)
#Create binary variable for Airbnb's official market entry in June 2011
analysis_simple$marketentry <- ifelse ((analysis_simple$year_month < "Juni 2011"), 0, 1)
#interactionterm
analysis_simple$logABAB <- analysis_simple$AB_supply*analysis_simple$log_ABsupply
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + hotels + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
analysis_simple$marketentry <- ifelse ((as.character(analysis_simple$year_month) < "Juni 2011"), 0, 1)
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + hotels + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelII)
ModelII <- plm(log_nights ~ log_ABsupply + AB_supply + logABAB + log_inc + ue_rate + marketentry, data=analysis_simple, index=c("NID", "factor_ym"), model="within")
summary(ModelII)
